/*
 * Speech Services API version 2024-11-15
 * Speech Services API version 2024-11-15.
 *
 * OpenAPI spec version: 2024-11-15
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.43
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/EntityReference', 'model/EvaluationLinks', 'model/EvaluationProperties', 'model/Status'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./EntityReference'), require('./EvaluationLinks'), require('./EvaluationProperties'), require('./Status'));
  } else {
    // Browser globals (root is window)
    if (!root.SpeechServicesApiVersion20241115) {
      root.SpeechServicesApiVersion20241115 = {};
    }
    root.SpeechServicesApiVersion20241115.Evaluation = factory(root.SpeechServicesApiVersion20241115.ApiClient, root.SpeechServicesApiVersion20241115.EntityReference, root.SpeechServicesApiVersion20241115.EvaluationLinks, root.SpeechServicesApiVersion20241115.EvaluationProperties, root.SpeechServicesApiVersion20241115.Status);
  }
}(this, function(ApiClient, EntityReference, EvaluationLinks, EvaluationProperties, Status) {
  'use strict';

  /**
   * The Evaluation model module.
   * @module model/Evaluation
   * @version 2024-11-15
   */

  /**
   * Constructs a new <code>Evaluation</code>.
   * @alias module:model/Evaluation
   * @class
   * @param displayName {String} The display name of the object.
   * @param model1 {module:model/EntityReference} 
   * @param model2 {module:model/EntityReference} 
   * @param dataset {module:model/EntityReference} 
   * @param locale {String} The locale of the contained data.
   */
  var exports = function(displayName, model1, model2, dataset, locale) {
    this.displayName = displayName;
    this.model1 = model1;
    this.model2 = model2;
    this.dataset = dataset;
    this.locale = locale;
  };

  /**
   * Constructs a <code>Evaluation</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/Evaluation} obj Optional instance to populate.
   * @return {module:model/Evaluation} The populated <code>Evaluation</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();
      if (data.hasOwnProperty('displayName'))
        obj.displayName = ApiClient.convertToType(data['displayName'], 'String');
      if (data.hasOwnProperty('description'))
        obj.description = ApiClient.convertToType(data['description'], 'String');
      if (data.hasOwnProperty('customProperties'))
        obj.customProperties = ApiClient.convertToType(data['customProperties'], {'String': 'String'});
      if (data.hasOwnProperty('self'))
        obj.self = ApiClient.convertToType(data['self'], 'String');
      if (data.hasOwnProperty('createdDateTime'))
        obj.createdDateTime = ApiClient.convertToType(data['createdDateTime'], 'Date');
      if (data.hasOwnProperty('lastActionDateTime'))
        obj.lastActionDateTime = ApiClient.convertToType(data['lastActionDateTime'], 'Date');
      if (data.hasOwnProperty('model1'))
        obj.model1 = EntityReference.constructFromObject(data['model1']);
      if (data.hasOwnProperty('model2'))
        obj.model2 = EntityReference.constructFromObject(data['model2']);
      if (data.hasOwnProperty('dataset'))
        obj.dataset = EntityReference.constructFromObject(data['dataset']);
      if (data.hasOwnProperty('transcription1'))
        obj.transcription1 = EntityReference.constructFromObject(data['transcription1']);
      if (data.hasOwnProperty('transcription2'))
        obj.transcription2 = EntityReference.constructFromObject(data['transcription2']);
      if (data.hasOwnProperty('links'))
        obj.links = EvaluationLinks.constructFromObject(data['links']);
      if (data.hasOwnProperty('locale'))
        obj.locale = ApiClient.convertToType(data['locale'], 'String');
      if (data.hasOwnProperty('properties'))
        obj.properties = EvaluationProperties.constructFromObject(data['properties']);
      if (data.hasOwnProperty('status'))
        obj.status = Status.constructFromObject(data['status']);
    }
    return obj;
  }

  /**
   * The display name of the object.
   * @member {String} displayName
   */
  exports.prototype.displayName = undefined;

  /**
   * The description of the object.
   * @member {String} description
   */
  exports.prototype.description = undefined;

  /**
   * The custom properties of this entity. The maximum allowed key length is 64 characters, the maximum allowed value length is 256 characters and the count of allowed entries is 10.
   * @member {Object.<String, String>} customProperties
   */
  exports.prototype.customProperties = undefined;

  /**
   * The location of this entity.
   * @member {String} self
   */
  exports.prototype.self = undefined;

  /**
   * The time-stamp when the object was created. The time stamp is encoded as ISO 8601 date and time format (\"YYYY-MM-DDThh:mm:ssZ\", see https://en.wikipedia.org/wiki/ISO_8601#Combined_date_and_time_representations).
   * @member {Date} createdDateTime
   */
  exports.prototype.createdDateTime = undefined;

  /**
   * The time-stamp when the current status was entered. The time stamp is encoded as ISO 8601 date and time format (\"YYYY-MM-DDThh:mm:ssZ\", see https://en.wikipedia.org/wiki/ISO_8601#Combined_date_and_time_representations).
   * @member {Date} lastActionDateTime
   */
  exports.prototype.lastActionDateTime = undefined;

  /**
   * @member {module:model/EntityReference} model1
   */
  exports.prototype.model1 = undefined;

  /**
   * @member {module:model/EntityReference} model2
   */
  exports.prototype.model2 = undefined;

  /**
   * @member {module:model/EntityReference} dataset
   */
  exports.prototype.dataset = undefined;

  /**
   * @member {module:model/EntityReference} transcription1
   */
  exports.prototype.transcription1 = undefined;

  /**
   * @member {module:model/EntityReference} transcription2
   */
  exports.prototype.transcription2 = undefined;

  /**
   * @member {module:model/EvaluationLinks} links
   */
  exports.prototype.links = undefined;

  /**
   * The locale of the contained data.
   * @member {String} locale
   */
  exports.prototype.locale = undefined;

  /**
   * @member {module:model/EvaluationProperties} properties
   */
  exports.prototype.properties = undefined;

  /**
   * @member {module:model/Status} status
   */
  exports.prototype.status = undefined;


  return exports;

}));
