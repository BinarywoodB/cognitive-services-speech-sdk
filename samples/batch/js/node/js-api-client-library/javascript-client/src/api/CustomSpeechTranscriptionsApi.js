/*
 * Speech Services API version 2024-11-15
 * Speech Services API version 2024-11-15.
 *
 * OpenAPI spec version: 2024-11-15
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.43
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Error', 'model/PaginatedFiles', 'model/PaginatedTranscriptions', 'model/Transcription', 'model/TranscriptionLocales', 'model/TranscriptionUpdate'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/Error'), require('../model/PaginatedFiles'), require('../model/PaginatedTranscriptions'), require('../model/Transcription'), require('../model/TranscriptionLocales'), require('../model/TranscriptionUpdate'));
  } else {
    // Browser globals (root is window)
    if (!root.SpeechServicesApiVersion20241115) {
      root.SpeechServicesApiVersion20241115 = {};
    }
    root.SpeechServicesApiVersion20241115.CustomSpeechTranscriptionsApi = factory(root.SpeechServicesApiVersion20241115.ApiClient, root.SpeechServicesApiVersion20241115.Error, root.SpeechServicesApiVersion20241115.PaginatedFiles, root.SpeechServicesApiVersion20241115.PaginatedTranscriptions, root.SpeechServicesApiVersion20241115.Transcription, root.SpeechServicesApiVersion20241115.TranscriptionLocales, root.SpeechServicesApiVersion20241115.TranscriptionUpdate);
  }
}(this, function(ApiClient, Error, PaginatedFiles, PaginatedTranscriptions, Transcription, TranscriptionLocales, TranscriptionUpdate) {
  'use strict';

  /**
   * CustomSpeechTranscriptions service.
   * @module api/CustomSpeechTranscriptionsApi
   * @version 2024-11-15
   */

  /**
   * Constructs a new CustomSpeechTranscriptionsApi. 
   * @alias module:api/CustomSpeechTranscriptionsApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the transcriptionsDelete operation.
     * @callback module:api/CustomSpeechTranscriptionsApi~transcriptionsDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes the specified transcription task.
     * @param {String} id The identifier of the transcription.
     * @param {String} apiVersion The requested api version.
     * @param {module:api/CustomSpeechTranscriptionsApi~transcriptionsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.transcriptionsDelete = function(id, apiVersion, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling transcriptionsDelete");
      }

      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling transcriptionsDelete");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
        'api-version': apiVersion,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/transcriptions/{id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the transcriptionsGet operation.
     * @callback module:api/CustomSpeechTranscriptionsApi~transcriptionsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Transcription} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the transcription identified by the given ID.
     * @param {String} id The identifier of the transcription.
     * @param {String} apiVersion The requested api version.
     * @param {module:api/CustomSpeechTranscriptionsApi~transcriptionsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Transcription}
     */
    this.transcriptionsGet = function(id, apiVersion, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling transcriptionsGet");
      }

      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling transcriptionsGet");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
        'api-version': apiVersion,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Transcription;

      return this.apiClient.callApi(
        '/transcriptions/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the transcriptionsGetFile operation.
     * @callback module:api/CustomSpeechTranscriptionsApi~transcriptionsGetFileCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets one specific file (identified with fileId) from a transcription (identified with id).
     * @param {String} id The identifier of the transcription.
     * @param {String} fileId The identifier of the file.
     * @param {String} apiVersion The requested api version.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.sasLifetimeMinutes This parameter defines the duration in minutes for which an SAS url should be valid.              The parameter can only be used for operations on speech resources that don't have BYOS enabled and transcriptions without a destinationContainerUrl. For speech resources              that don't have BYOS enabled, the default SAS validity duration is 12 hours.              For speech resources with BYOS and transcriptions with a destinationContainerUrl, returned urls do not contain an SAS token.
     * @param {module:api/CustomSpeechTranscriptionsApi~transcriptionsGetFileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    this.transcriptionsGetFile = function(id, fileId, apiVersion, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling transcriptionsGetFile");
      }

      // verify the required parameter 'fileId' is set
      if (fileId === undefined || fileId === null) {
        throw new Error("Missing the required parameter 'fileId' when calling transcriptionsGetFile");
      }

      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling transcriptionsGetFile");
      }


      var pathParams = {
        'id': id,
        'fileId': fileId
      };
      var queryParams = {
        'sasLifetimeMinutes': opts['sasLifetimeMinutes'],
        'api-version': apiVersion,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = File;

      return this.apiClient.callApi(
        '/transcriptions/{id}/files/{fileId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the transcriptionsList operation.
     * @callback module:api/CustomSpeechTranscriptionsApi~transcriptionsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PaginatedTranscriptions} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a list of transcriptions for the authenticated subscription.
     * @param {String} apiVersion The requested api version.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.skip Number of datasets that will be skipped.
     * @param {Number} opts.top Number of datasets that will be included after skipping.
     * @param {String} opts.filter A filtering expression for selecting a subset of the available transcriptions.              - Supported properties: displayName, description, createdDateTime, lastActionDateTime, status, locale.              - Operators:                - eq, ne are supported for all properties.                - gt, ge, lt, le are supported for createdDateTime and lastActionDateTime.                - and, or, not are supported.              - Example:                filter=createdDateTime gt 2022-02-01T11:00:00Z
     * @param {module:api/CustomSpeechTranscriptionsApi~transcriptionsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PaginatedTranscriptions}
     */
    this.transcriptionsList = function(apiVersion, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling transcriptionsList");
      }


      var pathParams = {
      };
      var queryParams = {
        'skip': opts['skip'],
        'top': opts['top'],
        'filter': opts['filter'],
        'api-version': apiVersion,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = PaginatedTranscriptions;

      return this.apiClient.callApi(
        '/transcriptions', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the transcriptionsListFiles operation.
     * @callback module:api/CustomSpeechTranscriptionsApi~transcriptionsListFilesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PaginatedFiles} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the files of the transcription identified by the given ID.
     * @param {String} id The identifier of the transcription.
     * @param {String} apiVersion The requested api version.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.sasLifetimeMinutes This parameter defines the duration in minutes for which an SAS url should be valid.              The parameter can only be used for operations on speech resources that don't have BYOS enabled and transcriptions without a destinationContainerUrl. For speech resources              that don't have BYOS enabled, the default SAS validity duration is 12 hours.              For speech resources with BYOS and transcriptions with a destinationContainerUrl, returned urls do not contain an SAS token.
     * @param {Number} opts.skip Number of datasets that will be skipped.
     * @param {Number} opts.top Number of datasets that will be included after skipping.
     * @param {String} opts.filter A filtering expression for selecting a subset of the available files.              - Supported properties: name, createdDateTime, kind.              - Operators:                - eq, ne are supported for all properties.                - gt, ge, lt, le are supported for createdDateTime.                - and, or, not are supported.              - Example:                filter=name eq 'myaudio.wav.json' and kind eq 'Transcription'
     * @param {module:api/CustomSpeechTranscriptionsApi~transcriptionsListFilesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PaginatedFiles}
     */
    this.transcriptionsListFiles = function(id, apiVersion, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling transcriptionsListFiles");
      }

      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling transcriptionsListFiles");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
        'sasLifetimeMinutes': opts['sasLifetimeMinutes'],
        'skip': opts['skip'],
        'top': opts['top'],
        'filter': opts['filter'],
        'api-version': apiVersion,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = PaginatedFiles;

      return this.apiClient.callApi(
        '/transcriptions/{id}/files', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the transcriptionsListSupportedLocales operation.
     * @callback module:api/CustomSpeechTranscriptionsApi~transcriptionsListSupportedLocalesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TranscriptionLocales} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a list of supported locales for offline transcriptions.
     * @param {String} apiVersion The requested api version.
     * @param {module:api/CustomSpeechTranscriptionsApi~transcriptionsListSupportedLocalesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TranscriptionLocales}
     */
    this.transcriptionsListSupportedLocales = function(apiVersion, callback) {
      var postBody = null;

      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling transcriptionsListSupportedLocales");
      }


      var pathParams = {
      };
      var queryParams = {
        'api-version': apiVersion,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = TranscriptionLocales;

      return this.apiClient.callApi(
        '/transcriptions/locales', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the transcriptionsSubmit operation.
     * @callback module:api/CustomSpeechTranscriptionsApi~transcriptionsSubmitCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Transcription} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Submits a new transcription job.
     * @param {String} apiVersion The requested api version.
     * @param {module:model/Transcription} transcription The details of the new transcription.
     * @param {module:api/CustomSpeechTranscriptionsApi~transcriptionsSubmitCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Transcription}
     */
    this.transcriptionsSubmit = function(apiVersion, transcription, callback) {
      var postBody = transcription;

      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling transcriptionsSubmit");
      }

      // verify the required parameter 'transcription' is set
      if (transcription === undefined || transcription === null) {
        throw new Error("Missing the required parameter 'transcription' when calling transcriptionsSubmit");
      }


      var pathParams = {
      };
      var queryParams = {
        'api-version': apiVersion,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Transcription;

      return this.apiClient.callApi(
        '/transcriptions:submit', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the transcriptionsUpdate operation.
     * @callback module:api/CustomSpeechTranscriptionsApi~transcriptionsUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Transcription} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the mutable details of the transcription identified by its ID.
     * @param {String} id The identifier of the transcription.
     * @param {String} apiVersion The requested api version.
     * @param {module:model/TranscriptionUpdate} transcriptionUpdate The updated values for the transcription.
     * @param {module:api/CustomSpeechTranscriptionsApi~transcriptionsUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Transcription}
     */
    this.transcriptionsUpdate = function(id, apiVersion, transcriptionUpdate, callback) {
      var postBody = transcriptionUpdate;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling transcriptionsUpdate");
      }

      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling transcriptionsUpdate");
      }

      // verify the required parameter 'transcriptionUpdate' is set
      if (transcriptionUpdate === undefined || transcriptionUpdate === null) {
        throw new Error("Missing the required parameter 'transcriptionUpdate' when calling transcriptionsUpdate");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
        'api-version': apiVersion,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json', 'application/merge-patch+json'];
      var accepts = ['application/json'];
      var returnType = Transcription;

      return this.apiClient.callApi(
        '/transcriptions/{id}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
