/*
 * Speech Services API version 2024-11-15
 * Speech Services API version 2024-11-15.
 *
 * OpenAPI spec version: 2024-11-15
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.43
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/CommitBlocksEntry', 'model/Dataset', 'model/DatasetLocales', 'model/DatasetUpdate', 'model/Error', 'model/PaginatedDatasets', 'model/PaginatedFiles', 'model/UploadedBlocks'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/CommitBlocksEntry'), require('../model/Dataset'), require('../model/DatasetLocales'), require('../model/DatasetUpdate'), require('../model/Error'), require('../model/PaginatedDatasets'), require('../model/PaginatedFiles'), require('../model/UploadedBlocks'));
  } else {
    // Browser globals (root is window)
    if (!root.SpeechServicesApiVersion20241115) {
      root.SpeechServicesApiVersion20241115 = {};
    }
    root.SpeechServicesApiVersion20241115.CustomSpeechDatasetsForModelAdaptationApi = factory(root.SpeechServicesApiVersion20241115.ApiClient, root.SpeechServicesApiVersion20241115.CommitBlocksEntry, root.SpeechServicesApiVersion20241115.Dataset, root.SpeechServicesApiVersion20241115.DatasetLocales, root.SpeechServicesApiVersion20241115.DatasetUpdate, root.SpeechServicesApiVersion20241115.Error, root.SpeechServicesApiVersion20241115.PaginatedDatasets, root.SpeechServicesApiVersion20241115.PaginatedFiles, root.SpeechServicesApiVersion20241115.UploadedBlocks);
  }
}(this, function(ApiClient, CommitBlocksEntry, Dataset, DatasetLocales, DatasetUpdate, Error, PaginatedDatasets, PaginatedFiles, UploadedBlocks) {
  'use strict';

  /**
   * CustomSpeechDatasetsForModelAdaptation service.
   * @module api/CustomSpeechDatasetsForModelAdaptationApi
   * @version 2024-11-15
   */

  /**
   * Constructs a new CustomSpeechDatasetsForModelAdaptationApi. 
   * @alias module:api/CustomSpeechDatasetsForModelAdaptationApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the datasetsCommitBlocks operation.
     * @callback module:api/CustomSpeechDatasetsForModelAdaptationApi~datasetsCommitBlocksCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Commit block list to complete the upload of the dataset.
     * @param {String} id The identifier of the dataset.
     * @param {String} apiVersion The requested api version.
     * @param {Array.<module:model/CommitBlocksEntry>} blockList The list of blocks that compile the dataset.
     * @param {module:api/CustomSpeechDatasetsForModelAdaptationApi~datasetsCommitBlocksCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.datasetsCommitBlocks = function(id, apiVersion, blockList, callback) {
      var postBody = blockList;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling datasetsCommitBlocks");
      }

      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling datasetsCommitBlocks");
      }

      // verify the required parameter 'blockList' is set
      if (blockList === undefined || blockList === null) {
        throw new Error("Missing the required parameter 'blockList' when calling datasetsCommitBlocks");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
        'api-version': apiVersion,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/datasets/{id}/blocks:commit', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the datasetsCreate operation.
     * @callback module:api/CustomSpeechDatasetsForModelAdaptationApi~datasetsCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Dataset} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Uploads and creates a new dataset by getting the data from a specified URL or starts waiting for data blocks to be uploaded.
     * @param {String} apiVersion The requested api version.
     * @param {module:model/Dataset} dataset Definition for the new dataset.
     * @param {module:api/CustomSpeechDatasetsForModelAdaptationApi~datasetsCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Dataset}
     */
    this.datasetsCreate = function(apiVersion, dataset, callback) {
      var postBody = dataset;

      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling datasetsCreate");
      }

      // verify the required parameter 'dataset' is set
      if (dataset === undefined || dataset === null) {
        throw new Error("Missing the required parameter 'dataset' when calling datasetsCreate");
      }


      var pathParams = {
      };
      var queryParams = {
        'api-version': apiVersion,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Dataset;

      return this.apiClient.callApi(
        '/datasets', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the datasetsDelete operation.
     * @callback module:api/CustomSpeechDatasetsForModelAdaptationApi~datasetsDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes the specified dataset.
     * @param {String} id The identifier of the dataset.
     * @param {String} apiVersion The requested api version.
     * @param {module:api/CustomSpeechDatasetsForModelAdaptationApi~datasetsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.datasetsDelete = function(id, apiVersion, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling datasetsDelete");
      }

      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling datasetsDelete");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
        'api-version': apiVersion,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/datasets/{id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the datasetsGet operation.
     * @callback module:api/CustomSpeechDatasetsForModelAdaptationApi~datasetsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Dataset} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the dataset identified by the given ID.
     * @param {String} id The identifier of the dataset.
     * @param {String} apiVersion The requested api version.
     * @param {module:api/CustomSpeechDatasetsForModelAdaptationApi~datasetsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Dataset}
     */
    this.datasetsGet = function(id, apiVersion, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling datasetsGet");
      }

      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling datasetsGet");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
        'api-version': apiVersion,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Dataset;

      return this.apiClient.callApi(
        '/datasets/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the datasetsGetBlocks operation.
     * @callback module:api/CustomSpeechDatasetsForModelAdaptationApi~datasetsGetBlocksCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UploadedBlocks} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the list of uploaded blocks for this dataset.
     * @param {String} id The identifier of the dataset.
     * @param {String} apiVersion The requested api version.
     * @param {module:api/CustomSpeechDatasetsForModelAdaptationApi~datasetsGetBlocksCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UploadedBlocks}
     */
    this.datasetsGetBlocks = function(id, apiVersion, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling datasetsGetBlocks");
      }

      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling datasetsGetBlocks");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
        'api-version': apiVersion,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = UploadedBlocks;

      return this.apiClient.callApi(
        '/datasets/{id}/blocks', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the datasetsGetFile operation.
     * @callback module:api/CustomSpeechDatasetsForModelAdaptationApi~datasetsGetFileCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets one specific file (identified with fileId) from a dataset (identified with id).
     * @param {String} id The identifier of the dataset.
     * @param {String} fileId The identifier of the file.
     * @param {String} apiVersion The requested api version.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.sasLifetimeMinutes This parameter defines the duration in minutes for which an SAS url should be valid.              The parameter can only be used for operations on speech resources that don't have BYOS enabled. For speech resources              that don't have BYOS enabled, the default SAS validity duration is 12 hours.              For speech resources with BYOS, returned urls do not contain an SAS token.
     * @param {module:api/CustomSpeechDatasetsForModelAdaptationApi~datasetsGetFileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    this.datasetsGetFile = function(id, fileId, apiVersion, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling datasetsGetFile");
      }

      // verify the required parameter 'fileId' is set
      if (fileId === undefined || fileId === null) {
        throw new Error("Missing the required parameter 'fileId' when calling datasetsGetFile");
      }

      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling datasetsGetFile");
      }


      var pathParams = {
        'id': id,
        'fileId': fileId
      };
      var queryParams = {
        'sasLifetimeMinutes': opts['sasLifetimeMinutes'],
        'api-version': apiVersion,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = File;

      return this.apiClient.callApi(
        '/datasets/{id}/files/{fileId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the datasetsList operation.
     * @callback module:api/CustomSpeechDatasetsForModelAdaptationApi~datasetsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PaginatedDatasets} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a list of datasets for the authenticated subscription.
     * @param {String} apiVersion The requested api version.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.skip Number of datasets that will be skipped.
     * @param {Number} opts.top Number of datasets that will be included after skipping.
     * @param {String} opts.filter A filtering expression for selecting a subset of the available datasets.              - Supported properties: displayName, description, createdDateTime, lastActionDateTime, status, locale, kind.              - Operators:                - eq, ne are supported for all properties.                - gt, ge, lt, le are supported for createdDateTime and lastActionDateTime.                - and, or, not are supported.              -Example:               filter=createdDateTime gt 2022-02-01T11:00:00Z and displayName eq 'My dataset'
     * @param {module:api/CustomSpeechDatasetsForModelAdaptationApi~datasetsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PaginatedDatasets}
     */
    this.datasetsList = function(apiVersion, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling datasetsList");
      }


      var pathParams = {
      };
      var queryParams = {
        'skip': opts['skip'],
        'top': opts['top'],
        'filter': opts['filter'],
        'api-version': apiVersion,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = PaginatedDatasets;

      return this.apiClient.callApi(
        '/datasets', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the datasetsListFiles operation.
     * @callback module:api/CustomSpeechDatasetsForModelAdaptationApi~datasetsListFilesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PaginatedFiles} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the files of the dataset identified by the given ID.
     * @param {String} id The identifier of the dataset.
     * @param {String} apiVersion The requested api version.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.sasLifetimeMinutes This parameter defines the duration in minutes for which an SAS url should be valid.              The parameter can only be used for operations on speech resources that don't have BYOS enabled. For speech resources              that don't have BYOS enabled, the default SAS validity duration is 12 hours.              For speech resources with BYOS, returned urls do not contain an SAS token.
     * @param {Number} opts.skip Number of datasets that will be skipped.
     * @param {Number} opts.top Number of datasets that will be included after skipping.
     * @param {String} opts.filter A filtering expression for selecting a subset of the available files.              - Supported properties: name, createdDateTime, kind.              - Operators:                - eq, ne are supported for all properties.                - gt, ge, lt, le are supported for createdDateTime.                - and, or, not are supported.              - Example:                filter=name eq 'myaudio.wav' and kind eq 'Audio'
     * @param {module:api/CustomSpeechDatasetsForModelAdaptationApi~datasetsListFilesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PaginatedFiles}
     */
    this.datasetsListFiles = function(id, apiVersion, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling datasetsListFiles");
      }

      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling datasetsListFiles");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
        'sasLifetimeMinutes': opts['sasLifetimeMinutes'],
        'skip': opts['skip'],
        'top': opts['top'],
        'filter': opts['filter'],
        'api-version': apiVersion,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = PaginatedFiles;

      return this.apiClient.callApi(
        '/datasets/{id}/files', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the datasetsListSupportedLocales operation.
     * @callback module:api/CustomSpeechDatasetsForModelAdaptationApi~datasetsListSupportedLocalesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DatasetLocales} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a list of supported locales for datasets.
     * @param {String} apiVersion The requested api version.
     * @param {module:api/CustomSpeechDatasetsForModelAdaptationApi~datasetsListSupportedLocalesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DatasetLocales}
     */
    this.datasetsListSupportedLocales = function(apiVersion, callback) {
      var postBody = null;

      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling datasetsListSupportedLocales");
      }


      var pathParams = {
      };
      var queryParams = {
        'api-version': apiVersion,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = DatasetLocales;

      return this.apiClient.callApi(
        '/datasets/locales', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the datasetsUpdate operation.
     * @callback module:api/CustomSpeechDatasetsForModelAdaptationApi~datasetsUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Dataset} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the mutable details of the dataset identified by its ID.
     * @param {String} id The identifier of the dataset.
     * @param {String} apiVersion The requested api version.
     * @param {module:model/DatasetUpdate} datasetUpdate The updated values for the dataset.
     * @param {module:api/CustomSpeechDatasetsForModelAdaptationApi~datasetsUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Dataset}
     */
    this.datasetsUpdate = function(id, apiVersion, datasetUpdate, callback) {
      var postBody = datasetUpdate;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling datasetsUpdate");
      }

      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling datasetsUpdate");
      }

      // verify the required parameter 'datasetUpdate' is set
      if (datasetUpdate === undefined || datasetUpdate === null) {
        throw new Error("Missing the required parameter 'datasetUpdate' when calling datasetsUpdate");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
        'api-version': apiVersion,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json', 'application/merge-patch+json'];
      var accepts = ['application/json'];
      var returnType = Dataset;

      return this.apiClient.callApi(
        '/datasets/{id}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the datasetsUploadBlock operation.
     * @callback module:api/CustomSpeechDatasetsForModelAdaptationApi~datasetsUploadBlockCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Upload a block of data for the dataset. The maximum size of the block is 8MiB.
     * @param {String} id The identifier of the dataset.
     * @param {String} blockid A valid Base64 string value that identifies the block. Prior to encoding, the string must be less than or equal to 64 bytes in size. For a given blob, the length of the value specified for the blockid parameter must be the same size for each block. Note that the Base64 string must be URL-encoded.
     * @param {String} apiVersion The requested api version.
     * @param {Blob} body 
     * @param {module:api/CustomSpeechDatasetsForModelAdaptationApi~datasetsUploadBlockCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.datasetsUploadBlock = function(id, blockid, apiVersion, body, callback) {
      var postBody = body;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling datasetsUploadBlock");
      }

      // verify the required parameter 'blockid' is set
      if (blockid === undefined || blockid === null) {
        throw new Error("Missing the required parameter 'blockid' when calling datasetsUploadBlock");
      }

      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling datasetsUploadBlock");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling datasetsUploadBlock");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
        'blockid': blockid,
        'api-version': apiVersion,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/octet-stream'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/datasets/{id}/blocks', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
