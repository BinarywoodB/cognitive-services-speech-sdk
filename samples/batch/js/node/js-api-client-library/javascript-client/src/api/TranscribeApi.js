/*
 * Speech Services API version 2024-11-15
 * Speech Services API version 2024-11-15.
 *
 * OpenAPI spec version: 2024-11-15
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.43
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Error', 'model/TranscribeResult'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/Error'), require('../model/TranscribeResult'));
  } else {
    // Browser globals (root is window)
    if (!root.SpeechServicesApiVersion20241115) {
      root.SpeechServicesApiVersion20241115 = {};
    }
    root.SpeechServicesApiVersion20241115.TranscribeApi = factory(root.SpeechServicesApiVersion20241115.ApiClient, root.SpeechServicesApiVersion20241115.Error, root.SpeechServicesApiVersion20241115.TranscribeResult);
  }
}(this, function(ApiClient, Error, TranscribeResult) {
  'use strict';

  /**
   * Transcribe service.
   * @module api/TranscribeApi
   * @version 2024-11-15
   */

  /**
   * Constructs a new TranscribeApi. 
   * @alias module:api/TranscribeApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the transcriptionsTranscribe operation.
     * @callback module:api/TranscribeApi~transcriptionsTranscribeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TranscribeResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Synchronous transcription of an audio file.
     * @param {String} apiVersion The requested api version.
     * @param {File} audio The content of the audio file to be transcribed. The audio file must be shorter than 2 hours in audio duration and smaller than 250 MB in size.
     * @param {Object} opts Optional parameters
     * @param {String} opts.definition Metadata for a transcription request. This field contains a JSON-serialized object of type `TranscribeDefinition`.
     * @param {module:api/TranscribeApi~transcriptionsTranscribeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TranscribeResult}
     */
    this.transcriptionsTranscribe = function(apiVersion, audio, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling transcriptionsTranscribe");
      }

      // verify the required parameter 'audio' is set
      if (audio === undefined || audio === null) {
        throw new Error("Missing the required parameter 'audio' when calling transcriptionsTranscribe");
      }


      var pathParams = {
      };
      var queryParams = {
        'api-version': apiVersion,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'audio': audio,
        'definition': opts['definition']
      };

      var authNames = ['api_key'];
      var contentTypes = ['multipart/form-data'];
      var accepts = ['application/json'];
      var returnType = TranscribeResult;

      return this.apiClient.callApi(
        '/transcriptions:transcribe', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
