/*
 * Speech Services API version 2024-11-15
 * Speech Services API version 2024-11-15.
 *
 * OpenAPI spec version: 2024-11-15
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.43
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Error', 'model/Evaluation', 'model/EvaluationUpdate', 'model/PaginatedEvaluations', 'model/PaginatedFiles'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/Error'), require('../model/Evaluation'), require('../model/EvaluationUpdate'), require('../model/PaginatedEvaluations'), require('../model/PaginatedFiles'));
  } else {
    // Browser globals (root is window)
    if (!root.SpeechServicesApiVersion20241115) {
      root.SpeechServicesApiVersion20241115 = {};
    }
    root.SpeechServicesApiVersion20241115.CustomSpeechModelEvaluationsApi = factory(root.SpeechServicesApiVersion20241115.ApiClient, root.SpeechServicesApiVersion20241115.Error, root.SpeechServicesApiVersion20241115.Evaluation, root.SpeechServicesApiVersion20241115.EvaluationUpdate, root.SpeechServicesApiVersion20241115.PaginatedEvaluations, root.SpeechServicesApiVersion20241115.PaginatedFiles);
  }
}(this, function(ApiClient, Error, Evaluation, EvaluationUpdate, PaginatedEvaluations, PaginatedFiles) {
  'use strict';

  /**
   * CustomSpeechModelEvaluations service.
   * @module api/CustomSpeechModelEvaluationsApi
   * @version 2024-11-15
   */

  /**
   * Constructs a new CustomSpeechModelEvaluationsApi. 
   * @alias module:api/CustomSpeechModelEvaluationsApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the evaluationsCreate operation.
     * @callback module:api/CustomSpeechModelEvaluationsApi~evaluationsCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Evaluation} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new evaluation.
     * @param {String} apiVersion The requested api version.
     * @param {module:model/Evaluation} evaluation The details of the new evaluation.
     * @param {module:api/CustomSpeechModelEvaluationsApi~evaluationsCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Evaluation}
     */
    this.evaluationsCreate = function(apiVersion, evaluation, callback) {
      var postBody = evaluation;

      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling evaluationsCreate");
      }

      // verify the required parameter 'evaluation' is set
      if (evaluation === undefined || evaluation === null) {
        throw new Error("Missing the required parameter 'evaluation' when calling evaluationsCreate");
      }


      var pathParams = {
      };
      var queryParams = {
        'api-version': apiVersion,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Evaluation;

      return this.apiClient.callApi(
        '/evaluations', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the evaluationsDelete operation.
     * @callback module:api/CustomSpeechModelEvaluationsApi~evaluationsDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes the evaluation identified by the given ID.
     * @param {String} id The identifier of the evaluation.
     * @param {String} apiVersion The requested api version.
     * @param {module:api/CustomSpeechModelEvaluationsApi~evaluationsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.evaluationsDelete = function(id, apiVersion, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling evaluationsDelete");
      }

      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling evaluationsDelete");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
        'api-version': apiVersion,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/evaluations/{id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the evaluationsGet operation.
     * @callback module:api/CustomSpeechModelEvaluationsApi~evaluationsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Evaluation} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the evaluation identified by the given ID.
     * @param {String} id The identifier of the evaluation.
     * @param {String} apiVersion The requested api version.
     * @param {module:api/CustomSpeechModelEvaluationsApi~evaluationsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Evaluation}
     */
    this.evaluationsGet = function(id, apiVersion, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling evaluationsGet");
      }

      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling evaluationsGet");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
        'api-version': apiVersion,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Evaluation;

      return this.apiClient.callApi(
        '/evaluations/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the evaluationsGetFile operation.
     * @callback module:api/CustomSpeechModelEvaluationsApi~evaluationsGetFileCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets one specific file (identified with fileId) from an evaluation (identified with id).
     * @param {String} id The identifier of the evaluation.
     * @param {String} fileId The identifier of the file.
     * @param {String} apiVersion The requested api version.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.sasLifetimeMinutes This parameter defines the duration in minutes for which an SAS url should be valid.              The parameter can only be used for operations on speech resources that don't have BYOS enabled. For speech resources              that don't have BYOS enabled, the default SAS validity duration is 12 hours.              For speech resources with BYOS, returned urls do not contain an SAS token.
     * @param {module:api/CustomSpeechModelEvaluationsApi~evaluationsGetFileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    this.evaluationsGetFile = function(id, fileId, apiVersion, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling evaluationsGetFile");
      }

      // verify the required parameter 'fileId' is set
      if (fileId === undefined || fileId === null) {
        throw new Error("Missing the required parameter 'fileId' when calling evaluationsGetFile");
      }

      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling evaluationsGetFile");
      }


      var pathParams = {
        'id': id,
        'fileId': fileId
      };
      var queryParams = {
        'sasLifetimeMinutes': opts['sasLifetimeMinutes'],
        'api-version': apiVersion,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = File;

      return this.apiClient.callApi(
        '/evaluations/{id}/files/{fileId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the evaluationsList operation.
     * @callback module:api/CustomSpeechModelEvaluationsApi~evaluationsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PaginatedEvaluations} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the list of evaluations for the authenticated subscription.
     * @param {String} apiVersion The requested api version.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.skip Number of datasets that will be skipped.
     * @param {Number} opts.top Number of datasets that will be included after skipping.
     * @param {String} opts.filter A filtering expression for selecting a subset of the available evaluations.              - Supported properties: displayName, description, createdDateTime, lastActionDateTime, status and locale.              - Operators:                - eq, ne are supported for all properties.                - gt, ge, lt, le are supported for createdDateTime and lastActionDateTime.                - and, or, not are supported.              - Example:                filter=displayName eq 'My evaluation'
     * @param {module:api/CustomSpeechModelEvaluationsApi~evaluationsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PaginatedEvaluations}
     */
    this.evaluationsList = function(apiVersion, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling evaluationsList");
      }


      var pathParams = {
      };
      var queryParams = {
        'skip': opts['skip'],
        'top': opts['top'],
        'filter': opts['filter'],
        'api-version': apiVersion,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = PaginatedEvaluations;

      return this.apiClient.callApi(
        '/evaluations', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the evaluationsListFiles operation.
     * @callback module:api/CustomSpeechModelEvaluationsApi~evaluationsListFilesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PaginatedFiles} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the files of the evaluation identified by the given ID.
     * @param {String} id The identifier of the evaluation.
     * @param {String} apiVersion The requested api version.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.sasLifetimeMinutes This parameter defines the duration in minutes for which an SAS url should be valid.              The parameter can only be used for operations on speech resources that don't have BYOS enabled. For speech resources              that don't have BYOS enabled, the default SAS validity duration is 12 hours.              For speech resources with BYOS, returned urls do not contain an SAS token.
     * @param {Number} opts.skip Number of datasets that will be skipped.
     * @param {Number} opts.top Number of datasets that will be included after skipping.
     * @param {String} opts.filter A filtering expression for selecting a subset of the available files.              - Supported properties: name, createdDateTime, kind.              - Operators:                - eq, ne are supported for all properties.                - gt, ge, lt, le are supported for createdDateTime.                - and, or, not are supported.              - Example:                filter=name eq 'myaudio.wav' and kind eq 'Audio'
     * @param {module:api/CustomSpeechModelEvaluationsApi~evaluationsListFilesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PaginatedFiles}
     */
    this.evaluationsListFiles = function(id, apiVersion, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling evaluationsListFiles");
      }

      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling evaluationsListFiles");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
        'sasLifetimeMinutes': opts['sasLifetimeMinutes'],
        'skip': opts['skip'],
        'top': opts['top'],
        'filter': opts['filter'],
        'api-version': apiVersion,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = PaginatedFiles;

      return this.apiClient.callApi(
        '/evaluations/{id}/files', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the evaluationsListSupportedLocales operation.
     * @callback module:api/CustomSpeechModelEvaluationsApi~evaluationsListSupportedLocalesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<'String'>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a list of supported locales for evaluations.
     * @param {String} apiVersion The requested api version.
     * @param {module:api/CustomSpeechModelEvaluationsApi~evaluationsListSupportedLocalesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<'String'>}
     */
    this.evaluationsListSupportedLocales = function(apiVersion, callback) {
      var postBody = null;

      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling evaluationsListSupportedLocales");
      }


      var pathParams = {
      };
      var queryParams = {
        'api-version': apiVersion,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ['String'];

      return this.apiClient.callApi(
        '/evaluations/locales', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the evaluationsUpdate operation.
     * @callback module:api/CustomSpeechModelEvaluationsApi~evaluationsUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Evaluation} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the mutable details of the evaluation identified by its id.
     * @param {String} id The identifier of the evaluation.
     * @param {String} apiVersion The requested api version.
     * @param {module:model/EvaluationUpdate} evaluationUpdate The object containing the updated fields of the evaluation.
     * @param {module:api/CustomSpeechModelEvaluationsApi~evaluationsUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Evaluation}
     */
    this.evaluationsUpdate = function(id, apiVersion, evaluationUpdate, callback) {
      var postBody = evaluationUpdate;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling evaluationsUpdate");
      }

      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling evaluationsUpdate");
      }

      // verify the required parameter 'evaluationUpdate' is set
      if (evaluationUpdate === undefined || evaluationUpdate === null) {
        throw new Error("Missing the required parameter 'evaluationUpdate' when calling evaluationsUpdate");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
        'api-version': apiVersion,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json', 'application/merge-patch+json'];
      var accepts = ['application/json'];
      var returnType = Evaluation;

      return this.apiClient.callApi(
        '/evaluations/{id}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
