/*
 * Speech Services API version 2024-11-15
 * Speech Services API version 2024-11-15.
 *
 * OpenAPI spec version: 2024-11-15
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.43
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.SpeechServicesApiVersion20241115);
  }
}(this, function(expect, SpeechServicesApiVersion20241115) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new SpeechServicesApiVersion20241115.CustomSpeechEndpointsApi();
  });

  describe('(package)', function() {
    describe('CustomSpeechEndpointsApi', function() {
      describe('endpointsCreate', function() {
        it('should call endpointsCreate successfully', function(done) {
          // TODO: uncomment, update parameter values for endpointsCreate call and complete the assertions
          /*
          var apiVersion = "apiVersion_example";
          var endpoint = new SpeechServicesApiVersion20241115.Endpoint();
          endpoint.model = new SpeechServicesApiVersion20241115.EntityReference();
          endpoint.model.self = "";
          endpoint.displayName = "";
          endpoint.description = "";
          endpoint.customProperties = {key: ""};
          endpoint.locale = "";
          endpoint.properties = new SpeechServicesApiVersion20241115.EndpointProperties();
          endpoint.properties.loggingEnabled = false;
          endpoint.properties.error = new SpeechServicesApiVersion20241115.EntityError();
          endpoint.links = new SpeechServicesApiVersion20241115.EndpointLinks();
          endpoint.status = new SpeechServicesApiVersion20241115.Status();

          instance.endpointsCreate(apiVersion, endpoint, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(SpeechServicesApiVersion20241115.Endpoint);
            expect(data.self).to.be.a('string');
            expect(data.self).to.be("");
            expect(data.model).to.be.a(SpeechServicesApiVersion20241115.EntityReference);
                  expect(data.model.self).to.be.a('string');
              expect(data.model.self).to.be("");
            expect(data.displayName).to.be.a('string');
            expect(data.displayName).to.be("");
            expect(data.description).to.be.a('string');
            expect(data.description).to.be("");
            {
              let dataCtr = data.customProperties;
              expect(dataCtr).to.be.an(Object);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }
            expect(data.locale).to.be.a('string');
            expect(data.locale).to.be("");
            expect(data.createdDateTime).to.be.a(Date);
            expect(data.createdDateTime).to.be(new Date());
            expect(data.lastActionDateTime).to.be.a(Date);
            expect(data.lastActionDateTime).to.be(new Date());
            expect(data.properties).to.be.a(SpeechServicesApiVersion20241115.EndpointProperties);
                  expect(data.properties.loggingEnabled).to.be.a('boolean');
              expect(data.properties.loggingEnabled).to.be(false);
              expect(data.properties.error).to.be.a(SpeechServicesApiVersion20241115.EntityError);
                    expect(data.properties.error.code).to.be.a('string');
                expect(data.properties.error.code).to.be("");
                expect(data.properties.error.message).to.be.a('string');
                expect(data.properties.error.message).to.be("");
            expect(data.links).to.be.a(SpeechServicesApiVersion20241115.EndpointLinks);
                  expect(data.links.webSocket).to.be.a('string');
              expect(data.links.webSocket).to.be("");
            expect(data.status).to.be.a(SpeechServicesApiVersion20241115.Status);
    
            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('endpointsDelete', function() {
        it('should call endpointsDelete successfully', function(done) {
          // TODO: uncomment, update parameter values for endpointsDelete call
          /*
          var id = "id_example";
          var apiVersion = "apiVersion_example";

          instance.endpointsDelete(id, apiVersion, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('endpointsGet', function() {
        it('should call endpointsGet successfully', function(done) {
          // TODO: uncomment, update parameter values for endpointsGet call and complete the assertions
          /*
          var id = "id_example";
          var apiVersion = "apiVersion_example";

          instance.endpointsGet(id, apiVersion, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(SpeechServicesApiVersion20241115.Endpoint);
            expect(data.self).to.be.a('string');
            expect(data.self).to.be("");
            expect(data.model).to.be.a(SpeechServicesApiVersion20241115.EntityReference);
                  expect(data.model.self).to.be.a('string');
              expect(data.model.self).to.be("");
            expect(data.displayName).to.be.a('string');
            expect(data.displayName).to.be("");
            expect(data.description).to.be.a('string');
            expect(data.description).to.be("");
            {
              let dataCtr = data.customProperties;
              expect(dataCtr).to.be.an(Object);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }
            expect(data.locale).to.be.a('string');
            expect(data.locale).to.be("");
            expect(data.createdDateTime).to.be.a(Date);
            expect(data.createdDateTime).to.be(new Date());
            expect(data.lastActionDateTime).to.be.a(Date);
            expect(data.lastActionDateTime).to.be(new Date());
            expect(data.properties).to.be.a(SpeechServicesApiVersion20241115.EndpointProperties);
                  expect(data.properties.loggingEnabled).to.be.a('boolean');
              expect(data.properties.loggingEnabled).to.be(false);
              expect(data.properties.error).to.be.a(SpeechServicesApiVersion20241115.EntityError);
                    expect(data.properties.error.code).to.be.a('string');
                expect(data.properties.error.code).to.be("");
                expect(data.properties.error.message).to.be.a('string');
                expect(data.properties.error.message).to.be("");
            expect(data.links).to.be.a(SpeechServicesApiVersion20241115.EndpointLinks);
                  expect(data.links.webSocket).to.be.a('string');
              expect(data.links.webSocket).to.be("");
            expect(data.status).to.be.a(SpeechServicesApiVersion20241115.Status);
    
            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('endpointsList', function() {
        it('should call endpointsList successfully', function(done) {
          // TODO: uncomment, update parameter values for endpointsList call and complete the assertions
          /*
          var apiVersion = "apiVersion_example";
          var opts = {};
          opts.skip = 56;
          opts.top = 56;
          opts.filter = "filter_example";

          instance.endpointsList(apiVersion, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(SpeechServicesApiVersion20241115.PaginatedEndpoints);
            {
              let dataCtr = data.values;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(SpeechServicesApiVersion20241115.Endpoint);
                expect(data.self).to.be.a('string');
                expect(data.self).to.be("");
                expect(data.model).to.be.a(SpeechServicesApiVersion20241115.EntityReference);
                      expect(data.model.self).to.be.a('string');
                  expect(data.model.self).to.be("");
                expect(data.displayName).to.be.a('string');
                expect(data.displayName).to.be("");
                expect(data.description).to.be.a('string');
                expect(data.description).to.be("");
                {
                  let dataCtr = data.customProperties;
                  expect(dataCtr).to.be.an(Object);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("");
                  }
                }
                expect(data.locale).to.be.a('string');
                expect(data.locale).to.be("");
                expect(data.createdDateTime).to.be.a(Date);
                expect(data.createdDateTime).to.be(new Date());
                expect(data.lastActionDateTime).to.be.a(Date);
                expect(data.lastActionDateTime).to.be(new Date());
                expect(data.properties).to.be.a(SpeechServicesApiVersion20241115.EndpointProperties);
                      expect(data.properties.loggingEnabled).to.be.a('boolean');
                  expect(data.properties.loggingEnabled).to.be(false);
                  expect(data.properties.error).to.be.a(SpeechServicesApiVersion20241115.EntityError);
                        expect(data.properties.error.code).to.be.a('string');
                    expect(data.properties.error.code).to.be("");
                    expect(data.properties.error.message).to.be.a('string');
                    expect(data.properties.error.message).to.be("");
                expect(data.links).to.be.a(SpeechServicesApiVersion20241115.EndpointLinks);
                      expect(data.links.webSocket).to.be.a('string');
                  expect(data.links.webSocket).to.be("");
                expect(data.status).to.be.a(SpeechServicesApiVersion20241115.Status);
        

                      }
            }
            expect(data.nextLink).to.be.a('string');
            expect(data.nextLink).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('endpointsListSupportedLocales', function() {
        it('should call endpointsListSupportedLocales successfully', function(done) {
          // TODO: uncomment, update parameter values for endpointsListSupportedLocales call and complete the assertions
          /*
          var apiVersion = "apiVersion_example";

          instance.endpointsListSupportedLocales(apiVersion, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a('string');
              // expect(data).to.be(null);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('endpointsUpdate', function() {
        it('should call endpointsUpdate successfully', function(done) {
          // TODO: uncomment, update parameter values for endpointsUpdate call and complete the assertions
          /*
          var id = "id_example";
          var apiVersion = "apiVersion_example";
          var endpointUpdate = new SpeechServicesApiVersion20241115.EndpointUpdate();
          endpointUpdate.displayName = "";
          endpointUpdate.description = "";
          endpointUpdate.model = new SpeechServicesApiVersion20241115.EntityReference();
          endpointUpdate.model.self = "";
          endpointUpdate.properties = new SpeechServicesApiVersion20241115.EndpointPropertiesUpdate();
          endpointUpdate.properties.contentLoggingEnabled = false;
          endpointUpdate.customProperties = {key: ""};

          instance.endpointsUpdate(id, apiVersion, endpointUpdate, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(SpeechServicesApiVersion20241115.Endpoint);
            expect(data.self).to.be.a('string');
            expect(data.self).to.be("");
            expect(data.model).to.be.a(SpeechServicesApiVersion20241115.EntityReference);
                  expect(data.model.self).to.be.a('string');
              expect(data.model.self).to.be("");
            expect(data.displayName).to.be.a('string');
            expect(data.displayName).to.be("");
            expect(data.description).to.be.a('string');
            expect(data.description).to.be("");
            {
              let dataCtr = data.customProperties;
              expect(dataCtr).to.be.an(Object);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }
            expect(data.locale).to.be.a('string');
            expect(data.locale).to.be("");
            expect(data.createdDateTime).to.be.a(Date);
            expect(data.createdDateTime).to.be(new Date());
            expect(data.lastActionDateTime).to.be.a(Date);
            expect(data.lastActionDateTime).to.be(new Date());
            expect(data.properties).to.be.a(SpeechServicesApiVersion20241115.EndpointProperties);
                  expect(data.properties.loggingEnabled).to.be.a('boolean');
              expect(data.properties.loggingEnabled).to.be(false);
              expect(data.properties.error).to.be.a(SpeechServicesApiVersion20241115.EntityError);
                    expect(data.properties.error.code).to.be.a('string');
                expect(data.properties.error.code).to.be("");
                expect(data.properties.error.message).to.be.a('string');
                expect(data.properties.error.message).to.be("");
            expect(data.links).to.be.a(SpeechServicesApiVersion20241115.EndpointLinks);
                  expect(data.links.webSocket).to.be.a('string');
              expect(data.links.webSocket).to.be("");
            expect(data.status).to.be.a(SpeechServicesApiVersion20241115.Status);
    
            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
