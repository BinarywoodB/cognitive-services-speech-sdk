/*
 * Speech Services API version 2024-11-15
 * Speech Services API version 2024-11-15.
 *
 * OpenAPI spec version: 2024-11-15
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.43
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.SpeechServicesApiVersion20241115);
  }
}(this, function(expect, SpeechServicesApiVersion20241115) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new SpeechServicesApiVersion20241115.CustomSpeechModelsApi();
  });

  describe('(package)', function() {
    describe('CustomSpeechModelsApi', function() {
      describe('modelsAuthorizeCopy', function() {
        it('should call modelsAuthorizeCopy successfully', function(done) {
          // TODO: uncomment, update parameter values for modelsAuthorizeCopy call and complete the assertions
          /*
          var apiVersion = "apiVersion_example";
          var modelCopyAuthorizationDefinition = new SpeechServicesApiVersion20241115.ModelCopyAuthorizationDefinition();
          modelCopyAuthorizationDefinition.sourceResourceId = "";

          instance.modelsAuthorizeCopy(apiVersion, modelCopyAuthorizationDefinition, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(SpeechServicesApiVersion20241115.ModelCopyAuthorization);
            expect(data.targetResourceRegion).to.be.a('string');
            expect(data.targetResourceRegion).to.be("");
            expect(data.targetResourceId).to.be.a('string');
            expect(data.targetResourceId).to.be("");
            expect(data.targetResourceEndpoint).to.be.a('string');
            expect(data.targetResourceEndpoint).to.be("");
            expect(data.sourceResourceId).to.be.a('string');
            expect(data.sourceResourceId).to.be("");
            expect(data.expirationDateTime).to.be.a(Date);
            expect(data.expirationDateTime).to.be(new Date());
            expect(data.id).to.be.a('string');
            expect(data.id).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('modelsCopy', function() {
        it('should call modelsCopy successfully', function(done) {
          // TODO: uncomment, update parameter values for modelsCopy call and complete the assertions
          /*
          var id = "id_example";
          var apiVersion = "apiVersion_example";
          var modelCopyAuthorization = new SpeechServicesApiVersion20241115.ModelCopyAuthorization();
          modelCopyAuthorization.targetResourceRegion = "";
          modelCopyAuthorization.targetResourceId = "";
          modelCopyAuthorization.targetResourceEndpoint = "";
          modelCopyAuthorization.sourceResourceId = "";
          modelCopyAuthorization.expirationDateTime = new Date();
          modelCopyAuthorization.id = "";

          instance.modelsCopy(id, apiVersion, modelCopyAuthorization, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(SpeechServicesApiVersion20241115.Operation);
            expect(data.id).to.be.a('string');
            expect(data.id).to.be("""00000000-0000-0000-0000-000000000000");
            expect(data.self).to.be.a('string');
            expect(data.self).to.be("");
            expect(data.createdDateTime).to.be.a(Date);
            expect(data.createdDateTime).to.be(new Date());
            expect(data.lastActionDateTime).to.be.a(Date);
            expect(data.lastActionDateTime).to.be(new Date());
            expect(data.status).to.be.a(SpeechServicesApiVersion20241115.Status);
                expect(data.result).to.be.a(SpeechServicesApiVersion20241115.OperationResult);
                  expect(data.result.link).to.be.a('string');
              expect(data.result.link).to.be("");
            expect(data.error).to.be.a(SpeechServicesApiVersion20241115.EntityError);
                  expect(data.error.code).to.be.a('string');
              expect(data.error.code).to.be("");
              expect(data.error.message).to.be.a('string');
              expect(data.error.message).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('modelsCreate', function() {
        it('should call modelsCreate successfully', function(done) {
          // TODO: uncomment, update parameter values for modelsCreate call and complete the assertions
          /*
          var apiVersion = "apiVersion_example";
          var model = new SpeechServicesApiVersion20241115.CustomModel();
          model.displayName = "";
          model.description = "";
          model.locale = "";
          model.status = new SpeechServicesApiVersion20241115.Status();

          instance.modelsCreate(apiVersion, model, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(SpeechServicesApiVersion20241115.CustomModel);
            expect(data.self).to.be.a('string');
            expect(data.self).to.be("");
            expect(data.displayName).to.be.a('string');
            expect(data.displayName).to.be("");
            expect(data.description).to.be.a('string');
            expect(data.description).to.be("");
            expect(data.locale).to.be.a('string');
            expect(data.locale).to.be("");
            expect(data.createdDateTime).to.be.a(Date);
            expect(data.createdDateTime).to.be(new Date());
            expect(data.lastActionDateTime).to.be.a(Date);
            expect(data.lastActionDateTime).to.be(new Date());
            expect(data.status).to.be.a(SpeechServicesApiVersion20241115.Status);
    
            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('modelsDelete', function() {
        it('should call modelsDelete successfully', function(done) {
          // TODO: uncomment, update parameter values for modelsDelete call
          /*
          var id = "id_example";
          var apiVersion = "apiVersion_example";

          instance.modelsDelete(id, apiVersion, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('modelsGetBaseModel', function() {
        it('should call modelsGetBaseModel successfully', function(done) {
          // TODO: uncomment, update parameter values for modelsGetBaseModel call and complete the assertions
          /*
          var id = "id_example";
          var apiVersion = "apiVersion_example";

          instance.modelsGetBaseModel(id, apiVersion, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(SpeechServicesApiVersion20241115.BaseModel);
            expect(data.self).to.be.a('string');
            expect(data.self).to.be("");
            expect(data.displayName).to.be.a('string');
            expect(data.displayName).to.be("");
            expect(data.description).to.be.a('string');
            expect(data.description).to.be("");
            expect(data.locale).to.be.a('string');
            expect(data.locale).to.be("");
            expect(data.createdDateTime).to.be.a(Date);
            expect(data.createdDateTime).to.be(new Date());
            expect(data.lastActionDateTime).to.be.a(Date);
            expect(data.lastActionDateTime).to.be(new Date());
            expect(data.status).to.be.a(SpeechServicesApiVersion20241115.Status);
    
            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('modelsGetBaseModelManifest', function() {
        it('should call modelsGetBaseModelManifest successfully', function(done) {
          // TODO: uncomment, update parameter values for modelsGetBaseModelManifest call and complete the assertions
          /*
          var id = "id_example";
          var sasLifetimeMinutes = 56;
          var apiVersion = "apiVersion_example";

          instance.modelsGetBaseModelManifest(id, sasLifetimeMinutes, apiVersion, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(SpeechServicesApiVersion20241115.ModelManifest);
            expect(data.model).to.be.a(SpeechServicesApiVersion20241115.EntityReference);
                  expect(data.model.self).to.be.a('string');
              expect(data.model.self).to.be("");
            {
              let dataCtr = data.modelFiles;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(SpeechServicesApiVersion20241115.ModelFile);
                expect(data.name).to.be.a('string');
                expect(data.name).to.be("");
                expect(data.contentUrl).to.be.a('string');
                expect(data.contentUrl).to.be("");

                      }
            }
            {
              let dataCtr = data.properties;
              expect(dataCtr).to.be.an(Object);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('modelsGetCustomModel', function() {
        it('should call modelsGetCustomModel successfully', function(done) {
          // TODO: uncomment, update parameter values for modelsGetCustomModel call and complete the assertions
          /*
          var id = "id_example";
          var apiVersion = "apiVersion_example";

          instance.modelsGetCustomModel(id, apiVersion, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(SpeechServicesApiVersion20241115.CustomModel);
            expect(data.self).to.be.a('string');
            expect(data.self).to.be("");
            expect(data.displayName).to.be.a('string');
            expect(data.displayName).to.be("");
            expect(data.description).to.be.a('string');
            expect(data.description).to.be("");
            expect(data.locale).to.be.a('string');
            expect(data.locale).to.be("");
            expect(data.createdDateTime).to.be.a(Date);
            expect(data.createdDateTime).to.be(new Date());
            expect(data.lastActionDateTime).to.be.a(Date);
            expect(data.lastActionDateTime).to.be(new Date());
            expect(data.status).to.be.a(SpeechServicesApiVersion20241115.Status);
    
            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('modelsGetCustomModelManifest', function() {
        it('should call modelsGetCustomModelManifest successfully', function(done) {
          // TODO: uncomment, update parameter values for modelsGetCustomModelManifest call and complete the assertions
          /*
          var id = "id_example";
          var sasLifetimeMinutes = 56;
          var apiVersion = "apiVersion_example";

          instance.modelsGetCustomModelManifest(id, sasLifetimeMinutes, apiVersion, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(SpeechServicesApiVersion20241115.ModelManifest);
            expect(data.model).to.be.a(SpeechServicesApiVersion20241115.EntityReference);
                  expect(data.model.self).to.be.a('string');
              expect(data.model.self).to.be("");
            {
              let dataCtr = data.modelFiles;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(SpeechServicesApiVersion20241115.ModelFile);
                expect(data.name).to.be.a('string');
                expect(data.name).to.be("");
                expect(data.contentUrl).to.be.a('string');
                expect(data.contentUrl).to.be("");

                      }
            }
            {
              let dataCtr = data.properties;
              expect(dataCtr).to.be.an(Object);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('modelsGetFile', function() {
        it('should call modelsGetFile successfully', function(done) {
          // TODO: uncomment, update parameter values for modelsGetFile call and complete the assertions
          /*
          var id = "id_example";
          var fileId = "fileId_example";
          var apiVersion = "apiVersion_example";
          var opts = {};
          opts.sasLifetimeMinutes = 56;

          instance.modelsGetFile(id, fileId, apiVersion, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(File);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('modelsListBaseModels', function() {
        it('should call modelsListBaseModels successfully', function(done) {
          // TODO: uncomment, update parameter values for modelsListBaseModels call and complete the assertions
          /*
          var apiVersion = "apiVersion_example";
          var opts = {};
          opts.skip = 56;
          opts.top = 56;
          opts.filter = "filter_example";

          instance.modelsListBaseModels(apiVersion, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(SpeechServicesApiVersion20241115.PaginatedBaseModels);
            {
              let dataCtr = data.values;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(SpeechServicesApiVersion20241115.BaseModel);
                expect(data.self).to.be.a('string');
                expect(data.self).to.be("");
                expect(data.displayName).to.be.a('string');
                expect(data.displayName).to.be("");
                expect(data.description).to.be.a('string');
                expect(data.description).to.be("");
                expect(data.locale).to.be.a('string');
                expect(data.locale).to.be("");
                expect(data.createdDateTime).to.be.a(Date);
                expect(data.createdDateTime).to.be(new Date());
                expect(data.lastActionDateTime).to.be.a(Date);
                expect(data.lastActionDateTime).to.be(new Date());
                expect(data.status).to.be.a(SpeechServicesApiVersion20241115.Status);
        

                      }
            }
            expect(data.nextLink).to.be.a('string');
            expect(data.nextLink).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('modelsListCustomModels', function() {
        it('should call modelsListCustomModels successfully', function(done) {
          // TODO: uncomment, update parameter values for modelsListCustomModels call and complete the assertions
          /*
          var apiVersion = "apiVersion_example";
          var opts = {};
          opts.skip = 56;
          opts.top = 56;
          opts.filter = "filter_example";

          instance.modelsListCustomModels(apiVersion, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(SpeechServicesApiVersion20241115.PaginatedCustomModels);
            {
              let dataCtr = data.values;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(SpeechServicesApiVersion20241115.CustomModel);
                expect(data.self).to.be.a('string');
                expect(data.self).to.be("");
                expect(data.displayName).to.be.a('string');
                expect(data.displayName).to.be("");
                expect(data.description).to.be.a('string');
                expect(data.description).to.be("");
                expect(data.locale).to.be.a('string');
                expect(data.locale).to.be("");
                expect(data.createdDateTime).to.be.a(Date);
                expect(data.createdDateTime).to.be(new Date());
                expect(data.lastActionDateTime).to.be.a(Date);
                expect(data.lastActionDateTime).to.be(new Date());
                expect(data.status).to.be.a(SpeechServicesApiVersion20241115.Status);
        

                      }
            }
            expect(data.nextLink).to.be.a('string');
            expect(data.nextLink).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('modelsListFiles', function() {
        it('should call modelsListFiles successfully', function(done) {
          // TODO: uncomment, update parameter values for modelsListFiles call and complete the assertions
          /*
          var id = "id_example";
          var apiVersion = "apiVersion_example";
          var opts = {};
          opts.sasLifetimeMinutes = 56;
          opts.skip = 56;
          opts.top = 56;
          opts.filter = "filter_example";

          instance.modelsListFiles(id, apiVersion, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(SpeechServicesApiVersion20241115.PaginatedFiles);
            {
              let dataCtr = data.values;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(File);
                expect(data).to.be();
              }
            }
            expect(data.nextLink).to.be.a('string');
            expect(data.nextLink).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('modelsListSupportedLocales', function() {
        it('should call modelsListSupportedLocales successfully', function(done) {
          // TODO: uncomment, update parameter values for modelsListSupportedLocales call and complete the assertions
          /*
          var apiVersion = "apiVersion_example";

          instance.modelsListSupportedLocales(apiVersion, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a('string');
              // expect(data).to.be(null);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('modelsUpdate', function() {
        it('should call modelsUpdate successfully', function(done) {
          // TODO: uncomment, update parameter values for modelsUpdate call and complete the assertions
          /*
          var id = "id_example";
          var apiVersion = "apiVersion_example";
          var modelUpdate = new SpeechServicesApiVersion20241115.ModelUpdate();
          modelUpdate.displayName = "";
          modelUpdate.description = "";
          modelUpdate.customProperties = {key: ""};

          instance.modelsUpdate(id, apiVersion, modelUpdate, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(SpeechServicesApiVersion20241115.CustomModel);
            expect(data.self).to.be.a('string');
            expect(data.self).to.be("");
            expect(data.displayName).to.be.a('string');
            expect(data.displayName).to.be("");
            expect(data.description).to.be.a('string');
            expect(data.description).to.be("");
            expect(data.locale).to.be.a('string');
            expect(data.locale).to.be("");
            expect(data.createdDateTime).to.be.a(Date);
            expect(data.createdDateTime).to.be(new Date());
            expect(data.lastActionDateTime).to.be.a(Date);
            expect(data.lastActionDateTime).to.be(new Date());
            expect(data.status).to.be.a(SpeechServicesApiVersion20241115.Status);
    
            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
