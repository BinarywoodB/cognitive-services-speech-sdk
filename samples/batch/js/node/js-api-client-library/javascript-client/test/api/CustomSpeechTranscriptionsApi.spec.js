/*
 * Speech Services API version 2024-11-15
 * Speech Services API version 2024-11-15.
 *
 * OpenAPI spec version: 2024-11-15
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.43
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.SpeechServicesApiVersion20241115);
  }
}(this, function(expect, SpeechServicesApiVersion20241115) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new SpeechServicesApiVersion20241115.CustomSpeechTranscriptionsApi();
  });

  describe('(package)', function() {
    describe('CustomSpeechTranscriptionsApi', function() {
      describe('transcriptionsDelete', function() {
        it('should call transcriptionsDelete successfully', function(done) {
          // TODO: uncomment, update parameter values for transcriptionsDelete call
          /*
          var id = "id_example";
          var apiVersion = "apiVersion_example";

          instance.transcriptionsDelete(id, apiVersion, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('transcriptionsGet', function() {
        it('should call transcriptionsGet successfully', function(done) {
          // TODO: uncomment, update parameter values for transcriptionsGet call and complete the assertions
          /*
          var id = "id_example";
          var apiVersion = "apiVersion_example";

          instance.transcriptionsGet(id, apiVersion, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(SpeechServicesApiVersion20241115.Transcription);
            expect(data.self).to.be.a('string');
            expect(data.self).to.be("");
            expect(data.displayName).to.be.a('string');
            expect(data.displayName).to.be("");
            expect(data.description).to.be.a('string');
            expect(data.description).to.be("");
            {
              let dataCtr = data.customProperties;
              expect(dataCtr).to.be.an(Object);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }
            expect(data.locale).to.be.a('string');
            expect(data.locale).to.be("");
            expect(data.createdDateTime).to.be.a(Date);
            expect(data.createdDateTime).to.be(new Date());
            expect(data.lastActionDateTime).to.be.a(Date);
            expect(data.lastActionDateTime).to.be(new Date());
            {
              let dataCtr = data.contentUrls;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }
            expect(data.model).to.be.a(SpeechServicesApiVersion20241115.EntityReference);
                  expect(data.model.self).to.be.a('string');
              expect(data.model.self).to.be("");
            expect(data.links).to.be.a(SpeechServicesApiVersion20241115.TranscriptionLinks);
                  expect(data.links.files).to.be.a('string');
              expect(data.links.files).to.be("");
            expect(data.properties).to.be.a(SpeechServicesApiVersion20241115.TranscriptionProperties);
                  expect(data.properties.wordLevelTimestampsEnabled).to.be.a('boolean');
              expect(data.properties.wordLevelTimestampsEnabled).to.be(false);
              expect(data.properties.displayFormWordLevelTimestampsEnabled).to.be.a('boolean');
              expect(data.properties.displayFormWordLevelTimestampsEnabled).to.be(false);
              {
                let dataCtr = data.properties.channels;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('number');
                  expect(data).to.be(0);
                }
              }
              expect(data.properties.punctuationMode).to.be.a(SpeechServicesApiVersion20241115.PunctuationMode);
                  expect(data.properties.profanityFilterMode).to.be.a(SpeechServicesApiVersion20241115.ProfanityFilterMode);
                  expect(data.properties.destinationContainerUrl).to.be.a('string');
              expect(data.properties.destinationContainerUrl).to.be("");
              expect(data.properties.timeToLiveHours).to.be.a('number');
              expect(data.properties.timeToLiveHours).to.be(0);
              expect(data.properties.languageIdentification).to.be.a(SpeechServicesApiVersion20241115.LanguageIdentificationProperties);
                    {
                  let dataCtr = data.properties.languageIdentification.candidateLocales;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("");
                  }
                }
                {
                  let dataCtr = data.properties.languageIdentification.speechModelMapping;
                  expect(dataCtr).to.be.an(Object);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(SpeechServicesApiVersion20241115.EntityReference);
                    expect(data.self).to.be.a('string');
                    expect(data.self).to.be("");
    
                          }
                }
                expect(data.properties.languageIdentification.mode).to.be.a(SpeechServicesApiVersion20241115.LanguageIdentificationMode);
        
              expect(data.properties.diarization).to.be.a(SpeechServicesApiVersion20241115.DiarizationProperties);
                    expect(data.properties.diarization.enabled).to.be.a('boolean');
                expect(data.properties.diarization.enabled).to.be(false);
                expect(data.properties.diarization.maxSpeakers).to.be.a('number');
                expect(data.properties.diarization.maxSpeakers).to.be(0);
              expect(data.properties.error).to.be.a(SpeechServicesApiVersion20241115.EntityError);
                    expect(data.properties.error.code).to.be.a('string');
                expect(data.properties.error.code).to.be("");
                expect(data.properties.error.message).to.be.a('string');
                expect(data.properties.error.message).to.be("");
              expect(data.properties.durationMilliseconds).to.be.a('number');
              expect(data.properties.durationMilliseconds).to.be("0");
            expect(data.contentContainerUrl).to.be.a('string');
            expect(data.contentContainerUrl).to.be("");
            expect(data.dataset).to.be.a(SpeechServicesApiVersion20241115.EntityReference);
                  expect(data.dataset.self).to.be.a('string');
              expect(data.dataset.self).to.be("");
            expect(data.status).to.be.a(SpeechServicesApiVersion20241115.Status);
    
            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('transcriptionsGetFile', function() {
        it('should call transcriptionsGetFile successfully', function(done) {
          // TODO: uncomment, update parameter values for transcriptionsGetFile call and complete the assertions
          /*
          var id = "id_example";
          var fileId = "fileId_example";
          var apiVersion = "apiVersion_example";
          var opts = {};
          opts.sasLifetimeMinutes = 56;

          instance.transcriptionsGetFile(id, fileId, apiVersion, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(File);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('transcriptionsList', function() {
        it('should call transcriptionsList successfully', function(done) {
          // TODO: uncomment, update parameter values for transcriptionsList call and complete the assertions
          /*
          var apiVersion = "apiVersion_example";
          var opts = {};
          opts.skip = 56;
          opts.top = 56;
          opts.filter = "filter_example";

          instance.transcriptionsList(apiVersion, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(SpeechServicesApiVersion20241115.PaginatedTranscriptions);
            {
              let dataCtr = data.values;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(SpeechServicesApiVersion20241115.Transcription);
                expect(data.self).to.be.a('string');
                expect(data.self).to.be("");
                expect(data.displayName).to.be.a('string');
                expect(data.displayName).to.be("");
                expect(data.description).to.be.a('string');
                expect(data.description).to.be("");
                {
                  let dataCtr = data.customProperties;
                  expect(dataCtr).to.be.an(Object);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("");
                  }
                }
                expect(data.locale).to.be.a('string');
                expect(data.locale).to.be("");
                expect(data.createdDateTime).to.be.a(Date);
                expect(data.createdDateTime).to.be(new Date());
                expect(data.lastActionDateTime).to.be.a(Date);
                expect(data.lastActionDateTime).to.be(new Date());
                {
                  let dataCtr = data.contentUrls;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("");
                  }
                }
                expect(data.model).to.be.a(SpeechServicesApiVersion20241115.EntityReference);
                      expect(data.model.self).to.be.a('string');
                  expect(data.model.self).to.be("");
                expect(data.links).to.be.a(SpeechServicesApiVersion20241115.TranscriptionLinks);
                      expect(data.links.files).to.be.a('string');
                  expect(data.links.files).to.be("");
                expect(data.properties).to.be.a(SpeechServicesApiVersion20241115.TranscriptionProperties);
                      expect(data.properties.wordLevelTimestampsEnabled).to.be.a('boolean');
                  expect(data.properties.wordLevelTimestampsEnabled).to.be(false);
                  expect(data.properties.displayFormWordLevelTimestampsEnabled).to.be.a('boolean');
                  expect(data.properties.displayFormWordLevelTimestampsEnabled).to.be(false);
                  {
                    let dataCtr = data.properties.channels;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a('number');
                      expect(data).to.be(0);
                    }
                  }
                  expect(data.properties.punctuationMode).to.be.a(SpeechServicesApiVersion20241115.PunctuationMode);
                      expect(data.properties.profanityFilterMode).to.be.a(SpeechServicesApiVersion20241115.ProfanityFilterMode);
                      expect(data.properties.destinationContainerUrl).to.be.a('string');
                  expect(data.properties.destinationContainerUrl).to.be("");
                  expect(data.properties.timeToLiveHours).to.be.a('number');
                  expect(data.properties.timeToLiveHours).to.be(0);
                  expect(data.properties.languageIdentification).to.be.a(SpeechServicesApiVersion20241115.LanguageIdentificationProperties);
                        {
                      let dataCtr = data.properties.languageIdentification.candidateLocales;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a('string');
                        expect(data).to.be("");
                      }
                    }
                    {
                      let dataCtr = data.properties.languageIdentification.speechModelMapping;
                      expect(dataCtr).to.be.an(Object);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(SpeechServicesApiVersion20241115.EntityReference);
                        expect(data.self).to.be.a('string');
                        expect(data.self).to.be("");
        
                              }
                    }
                    expect(data.properties.languageIdentification.mode).to.be.a(SpeechServicesApiVersion20241115.LanguageIdentificationMode);
            
                  expect(data.properties.diarization).to.be.a(SpeechServicesApiVersion20241115.DiarizationProperties);
                        expect(data.properties.diarization.enabled).to.be.a('boolean');
                    expect(data.properties.diarization.enabled).to.be(false);
                    expect(data.properties.diarization.maxSpeakers).to.be.a('number');
                    expect(data.properties.diarization.maxSpeakers).to.be(0);
                  expect(data.properties.error).to.be.a(SpeechServicesApiVersion20241115.EntityError);
                        expect(data.properties.error.code).to.be.a('string');
                    expect(data.properties.error.code).to.be("");
                    expect(data.properties.error.message).to.be.a('string');
                    expect(data.properties.error.message).to.be("");
                  expect(data.properties.durationMilliseconds).to.be.a('number');
                  expect(data.properties.durationMilliseconds).to.be("0");
                expect(data.contentContainerUrl).to.be.a('string');
                expect(data.contentContainerUrl).to.be("");
                expect(data.dataset).to.be.a(SpeechServicesApiVersion20241115.EntityReference);
                      expect(data.dataset.self).to.be.a('string');
                  expect(data.dataset.self).to.be("");
                expect(data.status).to.be.a(SpeechServicesApiVersion20241115.Status);
        

                      }
            }
            expect(data.nextLink).to.be.a('string');
            expect(data.nextLink).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('transcriptionsListFiles', function() {
        it('should call transcriptionsListFiles successfully', function(done) {
          // TODO: uncomment, update parameter values for transcriptionsListFiles call and complete the assertions
          /*
          var id = "id_example";
          var apiVersion = "apiVersion_example";
          var opts = {};
          opts.sasLifetimeMinutes = 56;
          opts.skip = 56;
          opts.top = 56;
          opts.filter = "filter_example";

          instance.transcriptionsListFiles(id, apiVersion, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(SpeechServicesApiVersion20241115.PaginatedFiles);
            {
              let dataCtr = data.values;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(File);
                expect(data).to.be();
              }
            }
            expect(data.nextLink).to.be.a('string');
            expect(data.nextLink).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('transcriptionsListSupportedLocales', function() {
        it('should call transcriptionsListSupportedLocales successfully', function(done) {
          // TODO: uncomment, update parameter values for transcriptionsListSupportedLocales call and complete the assertions
          /*
          var apiVersion = "apiVersion_example";

          instance.transcriptionsListSupportedLocales(apiVersion, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(SpeechServicesApiVersion20241115.TranscriptionLocales);
            {
              let dataCtr = data.transcribe;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }
            {
              let dataCtr = data.submit;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('transcriptionsSubmit', function() {
        it('should call transcriptionsSubmit successfully', function(done) {
          // TODO: uncomment, update parameter values for transcriptionsSubmit call and complete the assertions
          /*
          var apiVersion = "apiVersion_example";
          var transcription = new SpeechServicesApiVersion20241115.Transcription();
          transcription.displayName = "";
          transcription.description = "";
          transcription.customProperties = {key: ""};
          transcription.locale = "";
          transcription.contentUrls = [""];
          transcription.model = new SpeechServicesApiVersion20241115.EntityReference();
          transcription.model.self = "";
          transcription.links = new SpeechServicesApiVersion20241115.TranscriptionLinks();
          transcription.properties = new SpeechServicesApiVersion20241115.TranscriptionProperties();
          transcription.properties.wordLevelTimestampsEnabled = false;
          transcription.properties.displayFormWordLevelTimestampsEnabled = false;
          transcription.properties.channels = [0];
          transcription.properties.punctuationMode = new SpeechServicesApiVersion20241115.PunctuationMode();
          transcription.properties.profanityFilterMode = new SpeechServicesApiVersion20241115.ProfanityFilterMode();
          transcription.properties.destinationContainerUrl = "";
          transcription.properties.timeToLiveHours = 0;
          transcription.properties.languageIdentification = new SpeechServicesApiVersion20241115.LanguageIdentificationProperties();
          transcription.properties.languageIdentification.candidateLocales = [""];
          transcription.properties.languageIdentification.speechModelMapping = {key: new SpeechServicesApiVersion20241115.EntityReference()}new SpeechServicesApiVersion20241115.EntityReference();
          transcription.properties.languageIdentification.speechModelMapping.key.self = "";
          transcription.properties.languageIdentification.mode = new SpeechServicesApiVersion20241115.LanguageIdentificationMode();
          transcription.properties.diarization = new SpeechServicesApiVersion20241115.DiarizationProperties();
          transcription.properties.diarization.enabled = false;
          transcription.properties.diarization.maxSpeakers = 0;
          transcription.properties.error = new SpeechServicesApiVersion20241115.EntityError();
          transcription.contentContainerUrl = "";
          transcription.dataset = new SpeechServicesApiVersion20241115.EntityReference();
          transcription.dataset.self = "";
          transcription.status = new SpeechServicesApiVersion20241115.Status();

          instance.transcriptionsSubmit(apiVersion, transcription, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(SpeechServicesApiVersion20241115.Transcription);
            expect(data.self).to.be.a('string');
            expect(data.self).to.be("");
            expect(data.displayName).to.be.a('string');
            expect(data.displayName).to.be("");
            expect(data.description).to.be.a('string');
            expect(data.description).to.be("");
            {
              let dataCtr = data.customProperties;
              expect(dataCtr).to.be.an(Object);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }
            expect(data.locale).to.be.a('string');
            expect(data.locale).to.be("");
            expect(data.createdDateTime).to.be.a(Date);
            expect(data.createdDateTime).to.be(new Date());
            expect(data.lastActionDateTime).to.be.a(Date);
            expect(data.lastActionDateTime).to.be(new Date());
            {
              let dataCtr = data.contentUrls;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }
            expect(data.model).to.be.a(SpeechServicesApiVersion20241115.EntityReference);
                  expect(data.model.self).to.be.a('string');
              expect(data.model.self).to.be("");
            expect(data.links).to.be.a(SpeechServicesApiVersion20241115.TranscriptionLinks);
                  expect(data.links.files).to.be.a('string');
              expect(data.links.files).to.be("");
            expect(data.properties).to.be.a(SpeechServicesApiVersion20241115.TranscriptionProperties);
                  expect(data.properties.wordLevelTimestampsEnabled).to.be.a('boolean');
              expect(data.properties.wordLevelTimestampsEnabled).to.be(false);
              expect(data.properties.displayFormWordLevelTimestampsEnabled).to.be.a('boolean');
              expect(data.properties.displayFormWordLevelTimestampsEnabled).to.be(false);
              {
                let dataCtr = data.properties.channels;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('number');
                  expect(data).to.be(0);
                }
              }
              expect(data.properties.punctuationMode).to.be.a(SpeechServicesApiVersion20241115.PunctuationMode);
                  expect(data.properties.profanityFilterMode).to.be.a(SpeechServicesApiVersion20241115.ProfanityFilterMode);
                  expect(data.properties.destinationContainerUrl).to.be.a('string');
              expect(data.properties.destinationContainerUrl).to.be("");
              expect(data.properties.timeToLiveHours).to.be.a('number');
              expect(data.properties.timeToLiveHours).to.be(0);
              expect(data.properties.languageIdentification).to.be.a(SpeechServicesApiVersion20241115.LanguageIdentificationProperties);
                    {
                  let dataCtr = data.properties.languageIdentification.candidateLocales;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("");
                  }
                }
                {
                  let dataCtr = data.properties.languageIdentification.speechModelMapping;
                  expect(dataCtr).to.be.an(Object);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(SpeechServicesApiVersion20241115.EntityReference);
                    expect(data.self).to.be.a('string');
                    expect(data.self).to.be("");
    
                          }
                }
                expect(data.properties.languageIdentification.mode).to.be.a(SpeechServicesApiVersion20241115.LanguageIdentificationMode);
        
              expect(data.properties.diarization).to.be.a(SpeechServicesApiVersion20241115.DiarizationProperties);
                    expect(data.properties.diarization.enabled).to.be.a('boolean');
                expect(data.properties.diarization.enabled).to.be(false);
                expect(data.properties.diarization.maxSpeakers).to.be.a('number');
                expect(data.properties.diarization.maxSpeakers).to.be(0);
              expect(data.properties.error).to.be.a(SpeechServicesApiVersion20241115.EntityError);
                    expect(data.properties.error.code).to.be.a('string');
                expect(data.properties.error.code).to.be("");
                expect(data.properties.error.message).to.be.a('string');
                expect(data.properties.error.message).to.be("");
              expect(data.properties.durationMilliseconds).to.be.a('number');
              expect(data.properties.durationMilliseconds).to.be("0");
            expect(data.contentContainerUrl).to.be.a('string');
            expect(data.contentContainerUrl).to.be("");
            expect(data.dataset).to.be.a(SpeechServicesApiVersion20241115.EntityReference);
                  expect(data.dataset.self).to.be.a('string');
              expect(data.dataset.self).to.be("");
            expect(data.status).to.be.a(SpeechServicesApiVersion20241115.Status);
    
            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('transcriptionsUpdate', function() {
        it('should call transcriptionsUpdate successfully', function(done) {
          // TODO: uncomment, update parameter values for transcriptionsUpdate call and complete the assertions
          /*
          var id = "id_example";
          var apiVersion = "apiVersion_example";
          var transcriptionUpdate = new SpeechServicesApiVersion20241115.TranscriptionUpdate();
          transcriptionUpdate.displayName = "";
          transcriptionUpdate.description = "";
          transcriptionUpdate.customProperties = {key: ""};

          instance.transcriptionsUpdate(id, apiVersion, transcriptionUpdate, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(SpeechServicesApiVersion20241115.Transcription);
            expect(data.self).to.be.a('string');
            expect(data.self).to.be("");
            expect(data.displayName).to.be.a('string');
            expect(data.displayName).to.be("");
            expect(data.description).to.be.a('string');
            expect(data.description).to.be("");
            {
              let dataCtr = data.customProperties;
              expect(dataCtr).to.be.an(Object);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }
            expect(data.locale).to.be.a('string');
            expect(data.locale).to.be("");
            expect(data.createdDateTime).to.be.a(Date);
            expect(data.createdDateTime).to.be(new Date());
            expect(data.lastActionDateTime).to.be.a(Date);
            expect(data.lastActionDateTime).to.be(new Date());
            {
              let dataCtr = data.contentUrls;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }
            expect(data.model).to.be.a(SpeechServicesApiVersion20241115.EntityReference);
                  expect(data.model.self).to.be.a('string');
              expect(data.model.self).to.be("");
            expect(data.links).to.be.a(SpeechServicesApiVersion20241115.TranscriptionLinks);
                  expect(data.links.files).to.be.a('string');
              expect(data.links.files).to.be("");
            expect(data.properties).to.be.a(SpeechServicesApiVersion20241115.TranscriptionProperties);
                  expect(data.properties.wordLevelTimestampsEnabled).to.be.a('boolean');
              expect(data.properties.wordLevelTimestampsEnabled).to.be(false);
              expect(data.properties.displayFormWordLevelTimestampsEnabled).to.be.a('boolean');
              expect(data.properties.displayFormWordLevelTimestampsEnabled).to.be(false);
              {
                let dataCtr = data.properties.channels;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('number');
                  expect(data).to.be(0);
                }
              }
              expect(data.properties.punctuationMode).to.be.a(SpeechServicesApiVersion20241115.PunctuationMode);
                  expect(data.properties.profanityFilterMode).to.be.a(SpeechServicesApiVersion20241115.ProfanityFilterMode);
                  expect(data.properties.destinationContainerUrl).to.be.a('string');
              expect(data.properties.destinationContainerUrl).to.be("");
              expect(data.properties.timeToLiveHours).to.be.a('number');
              expect(data.properties.timeToLiveHours).to.be(0);
              expect(data.properties.languageIdentification).to.be.a(SpeechServicesApiVersion20241115.LanguageIdentificationProperties);
                    {
                  let dataCtr = data.properties.languageIdentification.candidateLocales;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("");
                  }
                }
                {
                  let dataCtr = data.properties.languageIdentification.speechModelMapping;
                  expect(dataCtr).to.be.an(Object);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(SpeechServicesApiVersion20241115.EntityReference);
                    expect(data.self).to.be.a('string');
                    expect(data.self).to.be("");
    
                          }
                }
                expect(data.properties.languageIdentification.mode).to.be.a(SpeechServicesApiVersion20241115.LanguageIdentificationMode);
        
              expect(data.properties.diarization).to.be.a(SpeechServicesApiVersion20241115.DiarizationProperties);
                    expect(data.properties.diarization.enabled).to.be.a('boolean');
                expect(data.properties.diarization.enabled).to.be(false);
                expect(data.properties.diarization.maxSpeakers).to.be.a('number');
                expect(data.properties.diarization.maxSpeakers).to.be(0);
              expect(data.properties.error).to.be.a(SpeechServicesApiVersion20241115.EntityError);
                    expect(data.properties.error.code).to.be.a('string');
                expect(data.properties.error.code).to.be("");
                expect(data.properties.error.message).to.be.a('string');
                expect(data.properties.error.message).to.be("");
              expect(data.properties.durationMilliseconds).to.be.a('number');
              expect(data.properties.durationMilliseconds).to.be("0");
            expect(data.contentContainerUrl).to.be.a('string');
            expect(data.contentContainerUrl).to.be("");
            expect(data.dataset).to.be.a(SpeechServicesApiVersion20241115.EntityReference);
                  expect(data.dataset.self).to.be.a('string');
              expect(data.dataset.self).to.be("");
            expect(data.status).to.be.a(SpeechServicesApiVersion20241115.Status);
    
            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
