/*
 * Speech Services API version 2024-11-15
 * Speech Services API version 2024-11-15.
 *
 * OpenAPI spec version: 2024-11-15
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.43
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.SpeechServicesApiVersion20241115);
  }
}(this, function(expect, SpeechServicesApiVersion20241115) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('EvaluationProperties', function() {
      beforeEach(function() {
        instance = new SpeechServicesApiVersion20241115.EvaluationProperties();
      });

      it('should create an instance of EvaluationProperties', function() {
        // TODO: update the code to test EvaluationProperties
        expect(instance).to.be.a(SpeechServicesApiVersion20241115.EvaluationProperties);
      });

      it('should have the property wordErrorRate1 (base name: "wordErrorRate1")', function() {
        // TODO: update the code to test the property wordErrorRate1
        expect(instance).to.have.property('wordErrorRate1');
        // expect(instance.wordErrorRate1).to.be(expectedValueLiteral);
      });

      it('should have the property sentenceErrorRate1 (base name: "sentenceErrorRate1")', function() {
        // TODO: update the code to test the property sentenceErrorRate1
        expect(instance).to.have.property('sentenceErrorRate1');
        // expect(instance.sentenceErrorRate1).to.be(expectedValueLiteral);
      });

      it('should have the property tokenErrorRate1 (base name: "tokenErrorRate1")', function() {
        // TODO: update the code to test the property tokenErrorRate1
        expect(instance).to.have.property('tokenErrorRate1');
        // expect(instance.tokenErrorRate1).to.be(expectedValueLiteral);
      });

      it('should have the property sentenceCount1 (base name: "sentenceCount1")', function() {
        // TODO: update the code to test the property sentenceCount1
        expect(instance).to.have.property('sentenceCount1');
        // expect(instance.sentenceCount1).to.be(expectedValueLiteral);
      });

      it('should have the property wordCount1 (base name: "wordCount1")', function() {
        // TODO: update the code to test the property wordCount1
        expect(instance).to.have.property('wordCount1');
        // expect(instance.wordCount1).to.be(expectedValueLiteral);
      });

      it('should have the property correctWordCount1 (base name: "correctWordCount1")', function() {
        // TODO: update the code to test the property correctWordCount1
        expect(instance).to.have.property('correctWordCount1');
        // expect(instance.correctWordCount1).to.be(expectedValueLiteral);
      });

      it('should have the property wordSubstitutionCount1 (base name: "wordSubstitutionCount1")', function() {
        // TODO: update the code to test the property wordSubstitutionCount1
        expect(instance).to.have.property('wordSubstitutionCount1');
        // expect(instance.wordSubstitutionCount1).to.be(expectedValueLiteral);
      });

      it('should have the property wordDeletionCount1 (base name: "wordDeletionCount1")', function() {
        // TODO: update the code to test the property wordDeletionCount1
        expect(instance).to.have.property('wordDeletionCount1');
        // expect(instance.wordDeletionCount1).to.be(expectedValueLiteral);
      });

      it('should have the property wordInsertionCount1 (base name: "wordInsertionCount1")', function() {
        // TODO: update the code to test the property wordInsertionCount1
        expect(instance).to.have.property('wordInsertionCount1');
        // expect(instance.wordInsertionCount1).to.be(expectedValueLiteral);
      });

      it('should have the property tokenCount1 (base name: "tokenCount1")', function() {
        // TODO: update the code to test the property tokenCount1
        expect(instance).to.have.property('tokenCount1');
        // expect(instance.tokenCount1).to.be(expectedValueLiteral);
      });

      it('should have the property correctTokenCount1 (base name: "correctTokenCount1")', function() {
        // TODO: update the code to test the property correctTokenCount1
        expect(instance).to.have.property('correctTokenCount1');
        // expect(instance.correctTokenCount1).to.be(expectedValueLiteral);
      });

      it('should have the property tokenSubstitutionCount1 (base name: "tokenSubstitutionCount1")', function() {
        // TODO: update the code to test the property tokenSubstitutionCount1
        expect(instance).to.have.property('tokenSubstitutionCount1');
        // expect(instance.tokenSubstitutionCount1).to.be(expectedValueLiteral);
      });

      it('should have the property tokenDeletionCount1 (base name: "tokenDeletionCount1")', function() {
        // TODO: update the code to test the property tokenDeletionCount1
        expect(instance).to.have.property('tokenDeletionCount1');
        // expect(instance.tokenDeletionCount1).to.be(expectedValueLiteral);
      });

      it('should have the property tokenInsertionCount1 (base name: "tokenInsertionCount1")', function() {
        // TODO: update the code to test the property tokenInsertionCount1
        expect(instance).to.have.property('tokenInsertionCount1');
        // expect(instance.tokenInsertionCount1).to.be(expectedValueLiteral);
      });

      it('should have the property tokenErrors1 (base name: "tokenErrors1")', function() {
        // TODO: update the code to test the property tokenErrors1
        expect(instance).to.have.property('tokenErrors1');
        // expect(instance.tokenErrors1).to.be(expectedValueLiteral);
      });

      it('should have the property wordErrorRate2 (base name: "wordErrorRate2")', function() {
        // TODO: update the code to test the property wordErrorRate2
        expect(instance).to.have.property('wordErrorRate2');
        // expect(instance.wordErrorRate2).to.be(expectedValueLiteral);
      });

      it('should have the property sentenceErrorRate2 (base name: "sentenceErrorRate2")', function() {
        // TODO: update the code to test the property sentenceErrorRate2
        expect(instance).to.have.property('sentenceErrorRate2');
        // expect(instance.sentenceErrorRate2).to.be(expectedValueLiteral);
      });

      it('should have the property tokenErrorRate2 (base name: "tokenErrorRate2")', function() {
        // TODO: update the code to test the property tokenErrorRate2
        expect(instance).to.have.property('tokenErrorRate2');
        // expect(instance.tokenErrorRate2).to.be(expectedValueLiteral);
      });

      it('should have the property sentenceCount2 (base name: "sentenceCount2")', function() {
        // TODO: update the code to test the property sentenceCount2
        expect(instance).to.have.property('sentenceCount2');
        // expect(instance.sentenceCount2).to.be(expectedValueLiteral);
      });

      it('should have the property wordCount2 (base name: "wordCount2")', function() {
        // TODO: update the code to test the property wordCount2
        expect(instance).to.have.property('wordCount2');
        // expect(instance.wordCount2).to.be(expectedValueLiteral);
      });

      it('should have the property correctWordCount2 (base name: "correctWordCount2")', function() {
        // TODO: update the code to test the property correctWordCount2
        expect(instance).to.have.property('correctWordCount2');
        // expect(instance.correctWordCount2).to.be(expectedValueLiteral);
      });

      it('should have the property wordSubstitutionCount2 (base name: "wordSubstitutionCount2")', function() {
        // TODO: update the code to test the property wordSubstitutionCount2
        expect(instance).to.have.property('wordSubstitutionCount2');
        // expect(instance.wordSubstitutionCount2).to.be(expectedValueLiteral);
      });

      it('should have the property wordDeletionCount2 (base name: "wordDeletionCount2")', function() {
        // TODO: update the code to test the property wordDeletionCount2
        expect(instance).to.have.property('wordDeletionCount2');
        // expect(instance.wordDeletionCount2).to.be(expectedValueLiteral);
      });

      it('should have the property wordInsertionCount2 (base name: "wordInsertionCount2")', function() {
        // TODO: update the code to test the property wordInsertionCount2
        expect(instance).to.have.property('wordInsertionCount2');
        // expect(instance.wordInsertionCount2).to.be(expectedValueLiteral);
      });

      it('should have the property tokenCount2 (base name: "tokenCount2")', function() {
        // TODO: update the code to test the property tokenCount2
        expect(instance).to.have.property('tokenCount2');
        // expect(instance.tokenCount2).to.be(expectedValueLiteral);
      });

      it('should have the property correctTokenCount2 (base name: "correctTokenCount2")', function() {
        // TODO: update the code to test the property correctTokenCount2
        expect(instance).to.have.property('correctTokenCount2');
        // expect(instance.correctTokenCount2).to.be(expectedValueLiteral);
      });

      it('should have the property tokenSubstitutionCount2 (base name: "tokenSubstitutionCount2")', function() {
        // TODO: update the code to test the property tokenSubstitutionCount2
        expect(instance).to.have.property('tokenSubstitutionCount2');
        // expect(instance.tokenSubstitutionCount2).to.be(expectedValueLiteral);
      });

      it('should have the property tokenDeletionCount2 (base name: "tokenDeletionCount2")', function() {
        // TODO: update the code to test the property tokenDeletionCount2
        expect(instance).to.have.property('tokenDeletionCount2');
        // expect(instance.tokenDeletionCount2).to.be(expectedValueLiteral);
      });

      it('should have the property tokenInsertionCount2 (base name: "tokenInsertionCount2")', function() {
        // TODO: update the code to test the property tokenInsertionCount2
        expect(instance).to.have.property('tokenInsertionCount2');
        // expect(instance.tokenInsertionCount2).to.be(expectedValueLiteral);
      });

      it('should have the property tokenErrors2 (base name: "tokenErrors2")', function() {
        // TODO: update the code to test the property tokenErrors2
        expect(instance).to.have.property('tokenErrors2');
        // expect(instance.tokenErrors2).to.be(expectedValueLiteral);
      });

      it('should have the property error (base name: "error")', function() {
        // TODO: update the code to test the property error
        expect(instance).to.have.property('error');
        // expect(instance.error).to.be(expectedValueLiteral);
      });

    });
  });

}));
