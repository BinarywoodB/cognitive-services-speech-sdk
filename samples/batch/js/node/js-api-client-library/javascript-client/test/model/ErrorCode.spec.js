/*
 * Speech Services API version 2024-11-15
 * Speech Services API version 2024-11-15.
 *
 * OpenAPI spec version: 2024-11-15
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.43
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.SpeechServicesApiVersion20241115);
  }
}(this, function(expect, SpeechServicesApiVersion20241115) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('ErrorCode', function() {
      beforeEach(function() {
        instance = SpeechServicesApiVersion20241115.ErrorCode;
      });

      it('should create an instance of ErrorCode', function() {
        // TODO: update the code to test ErrorCode
        expect(instance).to.be.a('object');
      });

      it('should have the property invalidRequest', function() {
        expect(instance).to.have.property('invalidRequest');
        expect(instance.invalidRequest).to.be("InvalidRequest");
      });

      it('should have the property invalidArgument', function() {
        expect(instance).to.have.property('invalidArgument');
        expect(instance.invalidArgument).to.be("InvalidArgument");
      });

      it('should have the property internalServerError', function() {
        expect(instance).to.have.property('internalServerError');
        expect(instance.internalServerError).to.be("InternalServerError");
      });

      it('should have the property serviceUnavailable', function() {
        expect(instance).to.have.property('serviceUnavailable');
        expect(instance.serviceUnavailable).to.be("ServiceUnavailable");
      });

      it('should have the property notFound', function() {
        expect(instance).to.have.property('notFound');
        expect(instance.notFound).to.be("NotFound");
      });

      it('should have the property pipelineError', function() {
        expect(instance).to.have.property('pipelineError');
        expect(instance.pipelineError).to.be("PipelineError");
      });

      it('should have the property conflict', function() {
        expect(instance).to.have.property('conflict');
        expect(instance.conflict).to.be("Conflict");
      });

      it('should have the property internalCommunicationFailed', function() {
        expect(instance).to.have.property('internalCommunicationFailed');
        expect(instance.internalCommunicationFailed).to.be("InternalCommunicationFailed");
      });

      it('should have the property forbidden', function() {
        expect(instance).to.have.property('forbidden');
        expect(instance.forbidden).to.be("Forbidden");
      });

      it('should have the property notAllowed', function() {
        expect(instance).to.have.property('notAllowed');
        expect(instance.notAllowed).to.be("NotAllowed");
      });

      it('should have the property unauthorized', function() {
        expect(instance).to.have.property('unauthorized');
        expect(instance.unauthorized).to.be("Unauthorized");
      });

      it('should have the property unsupportedMediaType', function() {
        expect(instance).to.have.property('unsupportedMediaType');
        expect(instance.unsupportedMediaType).to.be("UnsupportedMediaType");
      });

      it('should have the property tooManyRequests', function() {
        expect(instance).to.have.property('tooManyRequests');
        expect(instance.tooManyRequests).to.be("TooManyRequests");
      });

      it('should have the property unprocessableEntity', function() {
        expect(instance).to.have.property('unprocessableEntity');
        expect(instance.unprocessableEntity).to.be("UnprocessableEntity");
      });

    });
  });

}));
