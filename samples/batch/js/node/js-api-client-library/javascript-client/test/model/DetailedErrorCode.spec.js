/*
 * Speech Services API version 2024-11-15
 * Speech Services API version 2024-11-15.
 *
 * OpenAPI spec version: 2024-11-15
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.43
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.SpeechServicesApiVersion20241115);
  }
}(this, function(expect, SpeechServicesApiVersion20241115) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('DetailedErrorCode', function() {
      beforeEach(function() {
        instance = SpeechServicesApiVersion20241115.DetailedErrorCode;
      });

      it('should create an instance of DetailedErrorCode', function() {
        // TODO: update the code to test DetailedErrorCode
        expect(instance).to.be.a('object');
      });

      it('should have the property invalidParameterValue', function() {
        expect(instance).to.have.property('invalidParameterValue');
        expect(instance.invalidParameterValue).to.be("InvalidParameterValue");
      });

      it('should have the property invalidRequestBodyFormat', function() {
        expect(instance).to.have.property('invalidRequestBodyFormat');
        expect(instance.invalidRequestBodyFormat).to.be("InvalidRequestBodyFormat");
      });

      it('should have the property emptyRequest', function() {
        expect(instance).to.have.property('emptyRequest');
        expect(instance.emptyRequest).to.be("EmptyRequest");
      });

      it('should have the property missingInputRecords', function() {
        expect(instance).to.have.property('missingInputRecords');
        expect(instance.missingInputRecords).to.be("MissingInputRecords");
      });

      it('should have the property invalidDocument', function() {
        expect(instance).to.have.property('invalidDocument');
        expect(instance.invalidDocument).to.be("InvalidDocument");
      });

      it('should have the property modelVersionIncorrect', function() {
        expect(instance).to.have.property('modelVersionIncorrect');
        expect(instance.modelVersionIncorrect).to.be("ModelVersionIncorrect");
      });

      it('should have the property invalidDocumentBatch', function() {
        expect(instance).to.have.property('invalidDocumentBatch');
        expect(instance.invalidDocumentBatch).to.be("InvalidDocumentBatch");
      });

      it('should have the property unsupportedLanguageCode', function() {
        expect(instance).to.have.property('unsupportedLanguageCode');
        expect(instance.unsupportedLanguageCode).to.be("UnsupportedLanguageCode");
      });

      it('should have the property dataImportFailed', function() {
        expect(instance).to.have.property('dataImportFailed');
        expect(instance.dataImportFailed).to.be("DataImportFailed");
      });

      it('should have the property inUseViolation', function() {
        expect(instance).to.have.property('inUseViolation');
        expect(instance.inUseViolation).to.be("InUseViolation");
      });

      it('should have the property invalidLocale', function() {
        expect(instance).to.have.property('invalidLocale');
        expect(instance.invalidLocale).to.be("InvalidLocale");
      });

      it('should have the property invalidBaseModel', function() {
        expect(instance).to.have.property('invalidBaseModel');
        expect(instance.invalidBaseModel).to.be("InvalidBaseModel");
      });

      it('should have the property invalidAdaptationMapping', function() {
        expect(instance).to.have.property('invalidAdaptationMapping');
        expect(instance.invalidAdaptationMapping).to.be("InvalidAdaptationMapping");
      });

      it('should have the property invalidDataset', function() {
        expect(instance).to.have.property('invalidDataset');
        expect(instance.invalidDataset).to.be("InvalidDataset");
      });

      it('should have the property invalidTest', function() {
        expect(instance).to.have.property('invalidTest');
        expect(instance.invalidTest).to.be("InvalidTest");
      });

      it('should have the property failedDataset', function() {
        expect(instance).to.have.property('failedDataset');
        expect(instance.failedDataset).to.be("FailedDataset");
      });

      it('should have the property invalidModel', function() {
        expect(instance).to.have.property('invalidModel');
        expect(instance.invalidModel).to.be("InvalidModel");
      });

      it('should have the property invalidTranscription', function() {
        expect(instance).to.have.property('invalidTranscription');
        expect(instance.invalidTranscription).to.be("InvalidTranscription");
      });

      it('should have the property invalidPayload', function() {
        expect(instance).to.have.property('invalidPayload');
        expect(instance.invalidPayload).to.be("InvalidPayload");
      });

      it('should have the property invalidParameter', function() {
        expect(instance).to.have.property('invalidParameter');
        expect(instance.invalidParameter).to.be("InvalidParameter");
      });

      it('should have the property endpointWithoutLogging', function() {
        expect(instance).to.have.property('endpointWithoutLogging');
        expect(instance.endpointWithoutLogging).to.be("EndpointWithoutLogging");
      });

      it('should have the property invalidPermissions', function() {
        expect(instance).to.have.property('invalidPermissions');
        expect(instance.invalidPermissions).to.be("InvalidPermissions");
      });

      it('should have the property invalidPrerequisite', function() {
        expect(instance).to.have.property('invalidPrerequisite');
        expect(instance.invalidPrerequisite).to.be("InvalidPrerequisite");
      });

      it('should have the property invalidProductId', function() {
        expect(instance).to.have.property('invalidProductId');
        expect(instance.invalidProductId).to.be("InvalidProductId");
      });

      it('should have the property invalidSubscription', function() {
        expect(instance).to.have.property('invalidSubscription');
        expect(instance.invalidSubscription).to.be("InvalidSubscription");
      });

      it('should have the property invalidProject', function() {
        expect(instance).to.have.property('invalidProject');
        expect(instance.invalidProject).to.be("InvalidProject");
      });

      it('should have the property invalidProjectKind', function() {
        expect(instance).to.have.property('invalidProjectKind');
        expect(instance.invalidProjectKind).to.be("InvalidProjectKind");
      });

      it('should have the property invalidRecordingsUri', function() {
        expect(instance).to.have.property('invalidRecordingsUri');
        expect(instance.invalidRecordingsUri).to.be("InvalidRecordingsUri");
      });

      it('should have the property onlyOneOfUrlsOrContainerOrDataset', function() {
        expect(instance).to.have.property('onlyOneOfUrlsOrContainerOrDataset');
        expect(instance.onlyOneOfUrlsOrContainerOrDataset).to.be("OnlyOneOfUrlsOrContainerOrDataset");
      });

      it('should have the property exceededNumberOfRecordingsUris', function() {
        expect(instance).to.have.property('exceededNumberOfRecordingsUris');
        expect(instance.exceededNumberOfRecordingsUris).to.be("ExceededNumberOfRecordingsUris");
      });

      it('should have the property invalidChannels', function() {
        expect(instance).to.have.property('invalidChannels');
        expect(instance.invalidChannels).to.be("InvalidChannels");
      });

      it('should have the property modelMismatch', function() {
        expect(instance).to.have.property('modelMismatch');
        expect(instance.modelMismatch).to.be("ModelMismatch");
      });

      it('should have the property projectGenderMismatch', function() {
        expect(instance).to.have.property('projectGenderMismatch');
        expect(instance.projectGenderMismatch).to.be("ProjectGenderMismatch");
      });

      it('should have the property modelDeprecated', function() {
        expect(instance).to.have.property('modelDeprecated');
        expect(instance.modelDeprecated).to.be("ModelDeprecated");
      });

      it('should have the property modelExists', function() {
        expect(instance).to.have.property('modelExists');
        expect(instance.modelExists).to.be("ModelExists");
      });

      it('should have the property modelNotDeployable', function() {
        expect(instance).to.have.property('modelNotDeployable');
        expect(instance.modelNotDeployable).to.be("ModelNotDeployable");
      });

      it('should have the property endpointNotUpdatable', function() {
        expect(instance).to.have.property('endpointNotUpdatable');
        expect(instance.endpointNotUpdatable).to.be("EndpointNotUpdatable");
      });

      it('should have the property singleDefaultEndpoint', function() {
        expect(instance).to.have.property('singleDefaultEndpoint');
        expect(instance.singleDefaultEndpoint).to.be("SingleDefaultEndpoint");
      });

      it('should have the property endpointCannotBeDefault', function() {
        expect(instance).to.have.property('endpointCannotBeDefault');
        expect(instance.endpointCannotBeDefault).to.be("EndpointCannotBeDefault");
      });

      it('should have the property invalidModelUri', function() {
        expect(instance).to.have.property('invalidModelUri');
        expect(instance.invalidModelUri).to.be("InvalidModelUri");
      });

      it('should have the property subscriptionNotFound', function() {
        expect(instance).to.have.property('subscriptionNotFound');
        expect(instance.subscriptionNotFound).to.be("SubscriptionNotFound");
      });

      it('should have the property quotaViolation', function() {
        expect(instance).to.have.property('quotaViolation');
        expect(instance.quotaViolation).to.be("QuotaViolation");
      });

      it('should have the property unsupportedDelta', function() {
        expect(instance).to.have.property('unsupportedDelta');
        expect(instance.unsupportedDelta).to.be("UnsupportedDelta");
      });

      it('should have the property unsupportedFilter', function() {
        expect(instance).to.have.property('unsupportedFilter');
        expect(instance.unsupportedFilter).to.be("UnsupportedFilter");
      });

      it('should have the property unsupportedPagination', function() {
        expect(instance).to.have.property('unsupportedPagination');
        expect(instance.unsupportedPagination).to.be("UnsupportedPagination");
      });

      it('should have the property unsupportedDynamicConfiguration', function() {
        expect(instance).to.have.property('unsupportedDynamicConfiguration');
        expect(instance.unsupportedDynamicConfiguration).to.be("UnsupportedDynamicConfiguration");
      });

      it('should have the property unsupportedOrderBy', function() {
        expect(instance).to.have.property('unsupportedOrderBy');
        expect(instance.unsupportedOrderBy).to.be("UnsupportedOrderBy");
      });

      it('should have the property noUtf8WithBom', function() {
        expect(instance).to.have.property('noUtf8WithBom');
        expect(instance.noUtf8WithBom).to.be("NoUtf8WithBom");
      });

      it('should have the property modelDeploymentNotCompleteState', function() {
        expect(instance).to.have.property('modelDeploymentNotCompleteState');
        expect(instance.modelDeploymentNotCompleteState).to.be("ModelDeploymentNotCompleteState");
      });

      it('should have the property skuLimitsExist', function() {
        expect(instance).to.have.property('skuLimitsExist');
        expect(instance.skuLimitsExist).to.be("SkuLimitsExist");
      });

      it('should have the property deployingFailedModel', function() {
        expect(instance).to.have.property('deployingFailedModel');
        expect(instance.deployingFailedModel).to.be("DeployingFailedModel");
      });

      it('should have the property unsupportedTimeRange', function() {
        expect(instance).to.have.property('unsupportedTimeRange');
        expect(instance.unsupportedTimeRange).to.be("UnsupportedTimeRange");
      });

      it('should have the property invalidLogDate', function() {
        expect(instance).to.have.property('invalidLogDate');
        expect(instance.invalidLogDate).to.be("InvalidLogDate");
      });

      it('should have the property invalidLogId', function() {
        expect(instance).to.have.property('invalidLogId');
        expect(instance.invalidLogId).to.be("InvalidLogId");
      });

      it('should have the property invalidLogStartTime', function() {
        expect(instance).to.have.property('invalidLogStartTime');
        expect(instance.invalidLogStartTime).to.be("InvalidLogStartTime");
      });

      it('should have the property invalidLogEndTime', function() {
        expect(instance).to.have.property('invalidLogEndTime');
        expect(instance.invalidLogEndTime).to.be("InvalidLogEndTime");
      });

      it('should have the property invalidTopForLogs', function() {
        expect(instance).to.have.property('invalidTopForLogs');
        expect(instance.invalidTopForLogs).to.be("InvalidTopForLogs");
      });

      it('should have the property invalidSkipTokenForLogs', function() {
        expect(instance).to.have.property('invalidSkipTokenForLogs');
        expect(instance.invalidSkipTokenForLogs).to.be("InvalidSkipTokenForLogs");
      });

      it('should have the property deleteNotAllowed', function() {
        expect(instance).to.have.property('deleteNotAllowed');
        expect(instance.deleteNotAllowed).to.be("DeleteNotAllowed");
      });

      it('should have the property forbidden', function() {
        expect(instance).to.have.property('forbidden');
        expect(instance.forbidden).to.be("Forbidden");
      });

      it('should have the property deployNotAllowed', function() {
        expect(instance).to.have.property('deployNotAllowed');
        expect(instance.deployNotAllowed).to.be("DeployNotAllowed");
      });

      it('should have the property unexpectedError', function() {
        expect(instance).to.have.property('unexpectedError');
        expect(instance.unexpectedError).to.be("UnexpectedError");
      });

      it('should have the property invalidCollection', function() {
        expect(instance).to.have.property('invalidCollection');
        expect(instance.invalidCollection).to.be("InvalidCollection");
      });

      it('should have the property invalidCallbackUri', function() {
        expect(instance).to.have.property('invalidCallbackUri');
        expect(instance.invalidCallbackUri).to.be("InvalidCallbackUri");
      });

      it('should have the property invalidSasValidityDuration', function() {
        expect(instance).to.have.property('invalidSasValidityDuration');
        expect(instance.invalidSasValidityDuration).to.be("InvalidSasValidityDuration");
      });

      it('should have the property inaccessibleCustomerStorage', function() {
        expect(instance).to.have.property('inaccessibleCustomerStorage');
        expect(instance.inaccessibleCustomerStorage).to.be("InaccessibleCustomerStorage");
      });

      it('should have the property unsupportedClassBasedAdaptation', function() {
        expect(instance).to.have.property('unsupportedClassBasedAdaptation');
        expect(instance.unsupportedClassBasedAdaptation).to.be("UnsupportedClassBasedAdaptation");
      });

      it('should have the property invalidWebHookEventKind', function() {
        expect(instance).to.have.property('invalidWebHookEventKind');
        expect(instance.invalidWebHookEventKind).to.be("InvalidWebHookEventKind");
      });

      it('should have the property invalidTimeToLive', function() {
        expect(instance).to.have.property('invalidTimeToLive');
        expect(instance.invalidTimeToLive).to.be("InvalidTimeToLive");
      });

      it('should have the property invalidSourceAzureResourceId', function() {
        expect(instance).to.have.property('invalidSourceAzureResourceId');
        expect(instance.invalidSourceAzureResourceId).to.be("InvalidSourceAzureResourceId");
      });

      it('should have the property modelCopyAuthorizationExpired', function() {
        expect(instance).to.have.property('modelCopyAuthorizationExpired');
        expect(instance.modelCopyAuthorizationExpired).to.be("ModelCopyAuthorizationExpired");
      });

      it('should have the property endpointLoggingNotSupported', function() {
        expect(instance).to.have.property('endpointLoggingNotSupported');
        expect(instance.endpointLoggingNotSupported).to.be("EndpointLoggingNotSupported");
      });

      it('should have the property noLanguageIdentified', function() {
        expect(instance).to.have.property('noLanguageIdentified');
        expect(instance.noLanguageIdentified).to.be("NoLanguageIdentified");
      });

      it('should have the property multipleLanguagesIdentified', function() {
        expect(instance).to.have.property('multipleLanguagesIdentified');
        expect(instance.multipleLanguagesIdentified).to.be("MultipleLanguagesIdentified");
      });

      it('should have the property invalidAudioFormat', function() {
        expect(instance).to.have.property('invalidAudioFormat');
        expect(instance.invalidAudioFormat).to.be("InvalidAudioFormat");
      });

      it('should have the property badChannelConfiguration', function() {
        expect(instance).to.have.property('badChannelConfiguration');
        expect(instance.badChannelConfiguration).to.be("BadChannelConfiguration");
      });

      it('should have the property invalidChannelSpecification', function() {
        expect(instance).to.have.property('invalidChannelSpecification');
        expect(instance.invalidChannelSpecification).to.be("InvalidChannelSpecification");
      });

      it('should have the property audioLengthLimitExceeded', function() {
        expect(instance).to.have.property('audioLengthLimitExceeded');
        expect(instance.audioLengthLimitExceeded).to.be("AudioLengthLimitExceeded");
      });

      it('should have the property emptyAudioFile', function() {
        expect(instance).to.have.property('emptyAudioFile');
        expect(instance.emptyAudioFile).to.be("EmptyAudioFile");
      });

    });
  });

}));
