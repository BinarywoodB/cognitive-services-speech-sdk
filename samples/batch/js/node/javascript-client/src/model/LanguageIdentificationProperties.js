/*
 * Speech Services API version 2024-11-15
 * Speech Services API version 2024-11-15.
 *
 * OpenAPI spec version: 2024-11-15
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.43
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/EntityReference', 'model/LanguageIdentificationMode'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./EntityReference'), require('./LanguageIdentificationMode'));
  } else {
    // Browser globals (root is window)
    if (!root.SpeechServicesApiVersion20241115) {
      root.SpeechServicesApiVersion20241115 = {};
    }
    root.SpeechServicesApiVersion20241115.LanguageIdentificationProperties = factory(root.SpeechServicesApiVersion20241115.ApiClient, root.SpeechServicesApiVersion20241115.EntityReference, root.SpeechServicesApiVersion20241115.LanguageIdentificationMode);
  }
}(this, function(ApiClient, EntityReference, LanguageIdentificationMode) {
  'use strict';

  /**
   * The LanguageIdentificationProperties model module.
   * @module model/LanguageIdentificationProperties
   * @version 2024-11-15
   */

  /**
   * Constructs a new <code>LanguageIdentificationProperties</code>.
   * @alias module:model/LanguageIdentificationProperties
   * @class
   * @param candidateLocales {Array.<String>} The candidate locales for language identification (example [\"en-US\", \"de-DE\", \"es-ES\"]). A minimum of 2 and a maximum of 10 candidate locales, including the main locale for the transcription, is supported for continuous mode. For single language identification, the maximum number of candidate locales is unbounded.
   */
  var exports = function(candidateLocales) {
    this.candidateLocales = candidateLocales;
  };

  /**
   * Constructs a <code>LanguageIdentificationProperties</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/LanguageIdentificationProperties} obj Optional instance to populate.
   * @return {module:model/LanguageIdentificationProperties} The populated <code>LanguageIdentificationProperties</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();
      if (data.hasOwnProperty('candidateLocales'))
        obj.candidateLocales = ApiClient.convertToType(data['candidateLocales'], ['String']);
      if (data.hasOwnProperty('speechModelMapping'))
        obj.speechModelMapping = ApiClient.convertToType(data['speechModelMapping'], {'String': EntityReference});
      if (data.hasOwnProperty('mode'))
        obj.mode = LanguageIdentificationMode.constructFromObject(data['mode']);
    }
    return obj;
  }

  /**
   * The candidate locales for language identification (example [\"en-US\", \"de-DE\", \"es-ES\"]). A minimum of 2 and a maximum of 10 candidate locales, including the main locale for the transcription, is supported for continuous mode. For single language identification, the maximum number of candidate locales is unbounded.
   * @member {Array.<String>} candidateLocales
   */
  exports.prototype.candidateLocales = undefined;

  /**
   * An optional mapping of locales to speech model entities. If no model is given for a locale, the default base model is used. Keys must be locales contained in the candidate locales, values are entities for models of the respective locales.
   * @member {Object.<String, module:model/EntityReference>} speechModelMapping
   */
  exports.prototype.speechModelMapping = undefined;

  /**
   * @member {module:model/LanguageIdentificationMode} mode
   */
  exports.prototype.mode = undefined;


  return exports;

}));
