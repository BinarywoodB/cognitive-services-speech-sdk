/*
 * Speech Services API version 2024-11-15
 * Speech Services API version 2024-11-15.
 *
 * OpenAPI spec version: 2024-11-15
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.43
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Endpoint', 'model/EndpointUpdate', 'model/Error', 'model/PaginatedEndpoints'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/Endpoint'), require('../model/EndpointUpdate'), require('../model/Error'), require('../model/PaginatedEndpoints'));
  } else {
    // Browser globals (root is window)
    if (!root.SpeechServicesApiVersion20241115) {
      root.SpeechServicesApiVersion20241115 = {};
    }
    root.SpeechServicesApiVersion20241115.CustomSpeechEndpointsApi = factory(root.SpeechServicesApiVersion20241115.ApiClient, root.SpeechServicesApiVersion20241115.Endpoint, root.SpeechServicesApiVersion20241115.EndpointUpdate, root.SpeechServicesApiVersion20241115.Error, root.SpeechServicesApiVersion20241115.PaginatedEndpoints);
  }
}(this, function(ApiClient, Endpoint, EndpointUpdate, Error, PaginatedEndpoints) {
  'use strict';

  /**
   * CustomSpeechEndpoints service.
   * @module api/CustomSpeechEndpointsApi
   * @version 2024-11-15
   */

  /**
   * Constructs a new CustomSpeechEndpointsApi. 
   * @alias module:api/CustomSpeechEndpointsApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the endpointsCreate operation.
     * @callback module:api/CustomSpeechEndpointsApi~endpointsCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Endpoint} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new endpoint.
     * @param {String} apiVersion The requested api version.
     * @param {module:model/Endpoint} endpoint The details of the endpoint.
     * @param {module:api/CustomSpeechEndpointsApi~endpointsCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Endpoint}
     */
    this.endpointsCreate = function(apiVersion, endpoint, callback) {
      var postBody = endpoint;

      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling endpointsCreate");
      }

      // verify the required parameter 'endpoint' is set
      if (endpoint === undefined || endpoint === null) {
        throw new Error("Missing the required parameter 'endpoint' when calling endpointsCreate");
      }


      var pathParams = {
      };
      var queryParams = {
        'api-version': apiVersion,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Endpoint;

      return this.apiClient.callApi(
        '/endpoints', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the endpointsDelete operation.
     * @callback module:api/CustomSpeechEndpointsApi~endpointsDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes the endpoint identified by the given ID.
     * @param {String} id The identifier of the endpoint.
     * @param {String} apiVersion The requested api version.
     * @param {module:api/CustomSpeechEndpointsApi~endpointsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.endpointsDelete = function(id, apiVersion, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling endpointsDelete");
      }

      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling endpointsDelete");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
        'api-version': apiVersion,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/endpoints/{id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the endpointsGet operation.
     * @callback module:api/CustomSpeechEndpointsApi~endpointsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Endpoint} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the endpoint identified by the given ID.
     * @param {String} id The identifier of the endpoint.
     * @param {String} apiVersion The requested api version.
     * @param {module:api/CustomSpeechEndpointsApi~endpointsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Endpoint}
     */
    this.endpointsGet = function(id, apiVersion, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling endpointsGet");
      }

      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling endpointsGet");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
        'api-version': apiVersion,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Endpoint;

      return this.apiClient.callApi(
        '/endpoints/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the endpointsList operation.
     * @callback module:api/CustomSpeechEndpointsApi~endpointsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PaginatedEndpoints} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the list of endpoints for the authenticated subscription.
     * @param {String} apiVersion The requested api version.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.skip Number of datasets that will be skipped.
     * @param {Number} opts.top Number of datasets that will be included after skipping.
     * @param {String} opts.filter A filtering expression for selecting a subset of the available endpoints.              - Supported properties: displayName, description, createdDateTime, lastActionDateTime, status, locale.              - Operators:                - eq, ne are supported for all properties.                - gt, ge, lt, le are supported for createdDateTime and lastActionDateTime.                - and, or, not are supported.              - Example:                filter=locale eq 'en-US'
     * @param {module:api/CustomSpeechEndpointsApi~endpointsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PaginatedEndpoints}
     */
    this.endpointsList = function(apiVersion, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling endpointsList");
      }


      var pathParams = {
      };
      var queryParams = {
        'skip': opts['skip'],
        'top': opts['top'],
        'filter': opts['filter'],
        'api-version': apiVersion,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = PaginatedEndpoints;

      return this.apiClient.callApi(
        '/endpoints', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the endpointsListSupportedLocales operation.
     * @callback module:api/CustomSpeechEndpointsApi~endpointsListSupportedLocalesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<'String'>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a list of supported locales for endpoint creations.
     * @param {String} apiVersion The requested api version.
     * @param {module:api/CustomSpeechEndpointsApi~endpointsListSupportedLocalesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<'String'>}
     */
    this.endpointsListSupportedLocales = function(apiVersion, callback) {
      var postBody = null;

      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling endpointsListSupportedLocales");
      }


      var pathParams = {
      };
      var queryParams = {
        'api-version': apiVersion,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ['String'];

      return this.apiClient.callApi(
        '/endpoints/locales', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the endpointsUpdate operation.
     * @callback module:api/CustomSpeechEndpointsApi~endpointsUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Endpoint} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the metadata of the endpoint identified by the given ID.
     * @param {String} id The identifier of the endpoint.
     * @param {String} apiVersion The requested api version.
     * @param {module:model/EndpointUpdate} endpointUpdate The updated values for the endpoint.
     * @param {module:api/CustomSpeechEndpointsApi~endpointsUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Endpoint}
     */
    this.endpointsUpdate = function(id, apiVersion, endpointUpdate, callback) {
      var postBody = endpointUpdate;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling endpointsUpdate");
      }

      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling endpointsUpdate");
      }

      // verify the required parameter 'endpointUpdate' is set
      if (endpointUpdate === undefined || endpointUpdate === null) {
        throw new Error("Missing the required parameter 'endpointUpdate' when calling endpointsUpdate");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
        'api-version': apiVersion,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json', 'application/merge-patch+json'];
      var accepts = ['application/json'];
      var returnType = Endpoint;

      return this.apiClient.callApi(
        '/endpoints/{id}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
