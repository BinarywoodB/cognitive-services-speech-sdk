/*
 * Speech Services API version 2024-11-15
 * Speech Services API version 2024-11-15.
 *
 * OpenAPI spec version: 2024-11-15
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.43
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.SpeechServicesApiVersion20241115);
  }
}(this, function(expect, SpeechServicesApiVersion20241115) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new SpeechServicesApiVersion20241115.CustomSpeechDatasetsForModelAdaptationApi();
  });

  describe('(package)', function() {
    describe('CustomSpeechDatasetsForModelAdaptationApi', function() {
      describe('datasetsCommitBlocks', function() {
        it('should call datasetsCommitBlocks successfully', function(done) {
          // TODO: uncomment, update parameter values for datasetsCommitBlocks call
          /*
          var id = "id_example";
          var apiVersion = "apiVersion_example";
          var blockList = [new SpeechServicesApiVersion20241115.CommitBlocksEntry()];
          blockList[0].kind = new SpeechServicesApiVersion20241115.BlockKind();
          blockList[0].id = "";

          instance.datasetsCommitBlocks(id, apiVersion, blockList, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('datasetsCreate', function() {
        it('should call datasetsCreate successfully', function(done) {
          // TODO: uncomment, update parameter values for datasetsCreate call and complete the assertions
          /*
          var apiVersion = "apiVersion_example";
          var dataset = new SpeechServicesApiVersion20241115.Dataset();
          dataset.displayName = "";
          dataset.description = "";
          dataset.customProperties = {key: ""};
          dataset.locale = "";
          dataset.kind = new SpeechServicesApiVersion20241115.DatasetKind();
          dataset.links = new SpeechServicesApiVersion20241115.DatasetLinks();
          dataset.properties = new SpeechServicesApiVersion20241115.DatasetProperties();
          dataset.properties.textNormalizationKind = new SpeechServicesApiVersion20241115.TextNormalizationKind();
          dataset.properties.error = new SpeechServicesApiVersion20241115.EntityError();
          dataset.contentUrl = "";
          dataset.status = new SpeechServicesApiVersion20241115.Status();

          instance.datasetsCreate(apiVersion, dataset, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(SpeechServicesApiVersion20241115.Dataset);
            expect(data.self).to.be.a('string');
            expect(data.self).to.be("");
            expect(data.displayName).to.be.a('string');
            expect(data.displayName).to.be("");
            expect(data.description).to.be.a('string');
            expect(data.description).to.be("");
            {
              let dataCtr = data.customProperties;
              expect(dataCtr).to.be.an(Object);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }
            expect(data.locale).to.be.a('string');
            expect(data.locale).to.be("");
            expect(data.createdDateTime).to.be.a(Date);
            expect(data.createdDateTime).to.be(new Date());
            expect(data.lastActionDateTime).to.be.a(Date);
            expect(data.lastActionDateTime).to.be(new Date());
            expect(data.kind).to.be.a(SpeechServicesApiVersion20241115.DatasetKind);
                expect(data.links).to.be.a(SpeechServicesApiVersion20241115.DatasetLinks);
                  expect(data.links.files).to.be.a('string');
              expect(data.links.files).to.be("");
              expect(data.links.commitBlocks).to.be.a('string');
              expect(data.links.commitBlocks).to.be("");
              expect(data.links.listBlocks).to.be.a('string');
              expect(data.links.listBlocks).to.be("");
              expect(data.links.uploadBlocks).to.be.a('string');
              expect(data.links.uploadBlocks).to.be("");
            expect(data.properties).to.be.a(SpeechServicesApiVersion20241115.DatasetProperties);
                  expect(data.properties.acceptedLineCount).to.be.a('number');
              expect(data.properties.acceptedLineCount).to.be(0);
              expect(data.properties.rejectedLineCount).to.be.a('number');
              expect(data.properties.rejectedLineCount).to.be(0);
              expect(data.properties.durationMilliseconds).to.be.a('number');
              expect(data.properties.durationMilliseconds).to.be("0");
              expect(data.properties.textNormalizationKind).to.be.a(SpeechServicesApiVersion20241115.TextNormalizationKind);
                  expect(data.properties.error).to.be.a(SpeechServicesApiVersion20241115.EntityError);
                    expect(data.properties.error.code).to.be.a('string');
                expect(data.properties.error.code).to.be("");
                expect(data.properties.error.message).to.be.a('string');
                expect(data.properties.error.message).to.be("");
            expect(data.contentUrl).to.be.a('string');
            expect(data.contentUrl).to.be("");
            expect(data.status).to.be.a(SpeechServicesApiVersion20241115.Status);
    
            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('datasetsDelete', function() {
        it('should call datasetsDelete successfully', function(done) {
          // TODO: uncomment, update parameter values for datasetsDelete call
          /*
          var id = "id_example";
          var apiVersion = "apiVersion_example";

          instance.datasetsDelete(id, apiVersion, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('datasetsGet', function() {
        it('should call datasetsGet successfully', function(done) {
          // TODO: uncomment, update parameter values for datasetsGet call and complete the assertions
          /*
          var id = "id_example";
          var apiVersion = "apiVersion_example";

          instance.datasetsGet(id, apiVersion, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(SpeechServicesApiVersion20241115.Dataset);
            expect(data.self).to.be.a('string');
            expect(data.self).to.be("");
            expect(data.displayName).to.be.a('string');
            expect(data.displayName).to.be("");
            expect(data.description).to.be.a('string');
            expect(data.description).to.be("");
            {
              let dataCtr = data.customProperties;
              expect(dataCtr).to.be.an(Object);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }
            expect(data.locale).to.be.a('string');
            expect(data.locale).to.be("");
            expect(data.createdDateTime).to.be.a(Date);
            expect(data.createdDateTime).to.be(new Date());
            expect(data.lastActionDateTime).to.be.a(Date);
            expect(data.lastActionDateTime).to.be(new Date());
            expect(data.kind).to.be.a(SpeechServicesApiVersion20241115.DatasetKind);
                expect(data.links).to.be.a(SpeechServicesApiVersion20241115.DatasetLinks);
                  expect(data.links.files).to.be.a('string');
              expect(data.links.files).to.be("");
              expect(data.links.commitBlocks).to.be.a('string');
              expect(data.links.commitBlocks).to.be("");
              expect(data.links.listBlocks).to.be.a('string');
              expect(data.links.listBlocks).to.be("");
              expect(data.links.uploadBlocks).to.be.a('string');
              expect(data.links.uploadBlocks).to.be("");
            expect(data.properties).to.be.a(SpeechServicesApiVersion20241115.DatasetProperties);
                  expect(data.properties.acceptedLineCount).to.be.a('number');
              expect(data.properties.acceptedLineCount).to.be(0);
              expect(data.properties.rejectedLineCount).to.be.a('number');
              expect(data.properties.rejectedLineCount).to.be(0);
              expect(data.properties.durationMilliseconds).to.be.a('number');
              expect(data.properties.durationMilliseconds).to.be("0");
              expect(data.properties.textNormalizationKind).to.be.a(SpeechServicesApiVersion20241115.TextNormalizationKind);
                  expect(data.properties.error).to.be.a(SpeechServicesApiVersion20241115.EntityError);
                    expect(data.properties.error.code).to.be.a('string');
                expect(data.properties.error.code).to.be("");
                expect(data.properties.error.message).to.be.a('string');
                expect(data.properties.error.message).to.be("");
            expect(data.contentUrl).to.be.a('string');
            expect(data.contentUrl).to.be("");
            expect(data.status).to.be.a(SpeechServicesApiVersion20241115.Status);
    
            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('datasetsGetBlocks', function() {
        it('should call datasetsGetBlocks successfully', function(done) {
          // TODO: uncomment, update parameter values for datasetsGetBlocks call and complete the assertions
          /*
          var id = "id_example";
          var apiVersion = "apiVersion_example";

          instance.datasetsGetBlocks(id, apiVersion, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(SpeechServicesApiVersion20241115.UploadedBlocks);
            {
              let dataCtr = data.committedBlocks;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(SpeechServicesApiVersion20241115.ResponseBlock);
                expect(data.name).to.be.a('string');
                expect(data.name).to.be("");
                expect(data.size).to.be.a('number');
                expect(data.size).to.be(0);

                      }
            }
            {
              let dataCtr = data.uncommittedBlocks;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(SpeechServicesApiVersion20241115.ResponseBlock);
                expect(data.name).to.be.a('string');
                expect(data.name).to.be("");
                expect(data.size).to.be.a('number');
                expect(data.size).to.be(0);

                      }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('datasetsGetFile', function() {
        it('should call datasetsGetFile successfully', function(done) {
          // TODO: uncomment, update parameter values for datasetsGetFile call and complete the assertions
          /*
          var id = "id_example";
          var fileId = "fileId_example";
          var apiVersion = "apiVersion_example";
          var opts = {};
          opts.sasLifetimeMinutes = 56;

          instance.datasetsGetFile(id, fileId, apiVersion, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(File);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('datasetsList', function() {
        it('should call datasetsList successfully', function(done) {
          // TODO: uncomment, update parameter values for datasetsList call and complete the assertions
          /*
          var apiVersion = "apiVersion_example";
          var opts = {};
          opts.skip = 56;
          opts.top = 56;
          opts.filter = "filter_example";

          instance.datasetsList(apiVersion, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(SpeechServicesApiVersion20241115.PaginatedDatasets);
            {
              let dataCtr = data.values;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(SpeechServicesApiVersion20241115.Dataset);
                expect(data.self).to.be.a('string');
                expect(data.self).to.be("");
                expect(data.displayName).to.be.a('string');
                expect(data.displayName).to.be("");
                expect(data.description).to.be.a('string');
                expect(data.description).to.be("");
                {
                  let dataCtr = data.customProperties;
                  expect(dataCtr).to.be.an(Object);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("");
                  }
                }
                expect(data.locale).to.be.a('string');
                expect(data.locale).to.be("");
                expect(data.createdDateTime).to.be.a(Date);
                expect(data.createdDateTime).to.be(new Date());
                expect(data.lastActionDateTime).to.be.a(Date);
                expect(data.lastActionDateTime).to.be(new Date());
                expect(data.kind).to.be.a(SpeechServicesApiVersion20241115.DatasetKind);
                    expect(data.links).to.be.a(SpeechServicesApiVersion20241115.DatasetLinks);
                      expect(data.links.files).to.be.a('string');
                  expect(data.links.files).to.be("");
                  expect(data.links.commitBlocks).to.be.a('string');
                  expect(data.links.commitBlocks).to.be("");
                  expect(data.links.listBlocks).to.be.a('string');
                  expect(data.links.listBlocks).to.be("");
                  expect(data.links.uploadBlocks).to.be.a('string');
                  expect(data.links.uploadBlocks).to.be("");
                expect(data.properties).to.be.a(SpeechServicesApiVersion20241115.DatasetProperties);
                      expect(data.properties.acceptedLineCount).to.be.a('number');
                  expect(data.properties.acceptedLineCount).to.be(0);
                  expect(data.properties.rejectedLineCount).to.be.a('number');
                  expect(data.properties.rejectedLineCount).to.be(0);
                  expect(data.properties.durationMilliseconds).to.be.a('number');
                  expect(data.properties.durationMilliseconds).to.be("0");
                  expect(data.properties.textNormalizationKind).to.be.a(SpeechServicesApiVersion20241115.TextNormalizationKind);
                      expect(data.properties.error).to.be.a(SpeechServicesApiVersion20241115.EntityError);
                        expect(data.properties.error.code).to.be.a('string');
                    expect(data.properties.error.code).to.be("");
                    expect(data.properties.error.message).to.be.a('string');
                    expect(data.properties.error.message).to.be("");
                expect(data.contentUrl).to.be.a('string');
                expect(data.contentUrl).to.be("");
                expect(data.status).to.be.a(SpeechServicesApiVersion20241115.Status);
        

                      }
            }
            expect(data.nextLink).to.be.a('string');
            expect(data.nextLink).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('datasetsListFiles', function() {
        it('should call datasetsListFiles successfully', function(done) {
          // TODO: uncomment, update parameter values for datasetsListFiles call and complete the assertions
          /*
          var id = "id_example";
          var apiVersion = "apiVersion_example";
          var opts = {};
          opts.sasLifetimeMinutes = 56;
          opts.skip = 56;
          opts.top = 56;
          opts.filter = "filter_example";

          instance.datasetsListFiles(id, apiVersion, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(SpeechServicesApiVersion20241115.PaginatedFiles);
            {
              let dataCtr = data.values;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(File);
                expect(data).to.be();
              }
            }
            expect(data.nextLink).to.be.a('string');
            expect(data.nextLink).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('datasetsListSupportedLocales', function() {
        it('should call datasetsListSupportedLocales successfully', function(done) {
          // TODO: uncomment, update parameter values for datasetsListSupportedLocales call and complete the assertions
          /*
          var apiVersion = "apiVersion_example";

          instance.datasetsListSupportedLocales(apiVersion, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(SpeechServicesApiVersion20241115.DatasetLocales);
            {
              let dataCtr = data.language;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }
            {
              let dataCtr = data.acoustic;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }
            {
              let dataCtr = data.pronunciation;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }
            {
              let dataCtr = data.audioFiles;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }
            {
              let dataCtr = data.languageMarkdown;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }
            {
              let dataCtr = data.outputFormatting;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('datasetsUpdate', function() {
        it('should call datasetsUpdate successfully', function(done) {
          // TODO: uncomment, update parameter values for datasetsUpdate call and complete the assertions
          /*
          var id = "id_example";
          var apiVersion = "apiVersion_example";
          var datasetUpdate = new SpeechServicesApiVersion20241115.DatasetUpdate();
          datasetUpdate.displayName = "";
          datasetUpdate.description = "";
          datasetUpdate.customProperties = {key: ""};

          instance.datasetsUpdate(id, apiVersion, datasetUpdate, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(SpeechServicesApiVersion20241115.Dataset);
            expect(data.self).to.be.a('string');
            expect(data.self).to.be("");
            expect(data.displayName).to.be.a('string');
            expect(data.displayName).to.be("");
            expect(data.description).to.be.a('string');
            expect(data.description).to.be("");
            {
              let dataCtr = data.customProperties;
              expect(dataCtr).to.be.an(Object);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }
            expect(data.locale).to.be.a('string');
            expect(data.locale).to.be("");
            expect(data.createdDateTime).to.be.a(Date);
            expect(data.createdDateTime).to.be(new Date());
            expect(data.lastActionDateTime).to.be.a(Date);
            expect(data.lastActionDateTime).to.be(new Date());
            expect(data.kind).to.be.a(SpeechServicesApiVersion20241115.DatasetKind);
                expect(data.links).to.be.a(SpeechServicesApiVersion20241115.DatasetLinks);
                  expect(data.links.files).to.be.a('string');
              expect(data.links.files).to.be("");
              expect(data.links.commitBlocks).to.be.a('string');
              expect(data.links.commitBlocks).to.be("");
              expect(data.links.listBlocks).to.be.a('string');
              expect(data.links.listBlocks).to.be("");
              expect(data.links.uploadBlocks).to.be.a('string');
              expect(data.links.uploadBlocks).to.be("");
            expect(data.properties).to.be.a(SpeechServicesApiVersion20241115.DatasetProperties);
                  expect(data.properties.acceptedLineCount).to.be.a('number');
              expect(data.properties.acceptedLineCount).to.be(0);
              expect(data.properties.rejectedLineCount).to.be.a('number');
              expect(data.properties.rejectedLineCount).to.be(0);
              expect(data.properties.durationMilliseconds).to.be.a('number');
              expect(data.properties.durationMilliseconds).to.be("0");
              expect(data.properties.textNormalizationKind).to.be.a(SpeechServicesApiVersion20241115.TextNormalizationKind);
                  expect(data.properties.error).to.be.a(SpeechServicesApiVersion20241115.EntityError);
                    expect(data.properties.error.code).to.be.a('string');
                expect(data.properties.error.code).to.be("");
                expect(data.properties.error.message).to.be.a('string');
                expect(data.properties.error.message).to.be("");
            expect(data.contentUrl).to.be.a('string');
            expect(data.contentUrl).to.be("");
            expect(data.status).to.be.a(SpeechServicesApiVersion20241115.Status);
    
            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('datasetsUploadBlock', function() {
        it('should call datasetsUploadBlock successfully', function(done) {
          // TODO: uncomment, update parameter values for datasetsUploadBlock call
          /*
          var id = "id_example";
          var blockid = "blockid_example";
          var apiVersion = "apiVersion_example";
          var body = "QmFzZTY0IGV4YW1wbGU=";

          instance.datasetsUploadBlock(id, blockid, apiVersion, body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
