/*
 * Speech Services API version 2024-11-15
 * Speech Services API version 2024-11-15.
 *
 * OpenAPI spec version: 2024-11-15
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.43
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.SpeechServicesApiVersion20241115);
  }
}(this, function(expect, SpeechServicesApiVersion20241115) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new SpeechServicesApiVersion20241115.CustomSpeechModelEvaluationsApi();
  });

  describe('(package)', function() {
    describe('CustomSpeechModelEvaluationsApi', function() {
      describe('evaluationsCreate', function() {
        it('should call evaluationsCreate successfully', function(done) {
          // TODO: uncomment, update parameter values for evaluationsCreate call and complete the assertions
          /*
          var apiVersion = "apiVersion_example";
          var evaluation = new SpeechServicesApiVersion20241115.Evaluation();
          evaluation.displayName = "";
          evaluation.description = "";
          evaluation.customProperties = {key: ""};
          evaluation.model1 = new SpeechServicesApiVersion20241115.EntityReference();
          evaluation.model1.self = "";
          evaluation.model2 = new SpeechServicesApiVersion20241115.EntityReference();
          evaluation.model2.self = "";
          evaluation.dataset = new SpeechServicesApiVersion20241115.EntityReference();
          evaluation.dataset.self = "";
          evaluation.transcription1 = new SpeechServicesApiVersion20241115.EntityReference();
          evaluation.transcription1.self = "";
          evaluation.transcription2 = new SpeechServicesApiVersion20241115.EntityReference();
          evaluation.transcription2.self = "";
          evaluation.links = new SpeechServicesApiVersion20241115.EvaluationLinks();
          evaluation.locale = "";
          evaluation.properties = new SpeechServicesApiVersion20241115.EvaluationProperties();
          evaluation.properties.tokenErrors1 = new SpeechServicesApiVersion20241115.TokenErrorDetails();
          evaluation.properties.tokenErrors1.punctuation = new SpeechServicesApiVersion20241115.EditsSummary();
          evaluation.properties.tokenErrors1.capitalization = new SpeechServicesApiVersion20241115.EditsSummary();
          evaluation.properties.tokenErrors1.inverseTextNormalization = new SpeechServicesApiVersion20241115.EditsSummary();
          evaluation.properties.tokenErrors1.lexical = new SpeechServicesApiVersion20241115.EditsSummary();
          evaluation.properties.tokenErrors1.others = new SpeechServicesApiVersion20241115.EditsSummary();
          evaluation.properties.tokenErrors2 = new SpeechServicesApiVersion20241115.TokenErrorDetails();
          evaluation.properties.tokenErrors2.punctuation = new SpeechServicesApiVersion20241115.EditsSummary();
          evaluation.properties.tokenErrors2.capitalization = new SpeechServicesApiVersion20241115.EditsSummary();
          evaluation.properties.tokenErrors2.inverseTextNormalization = new SpeechServicesApiVersion20241115.EditsSummary();
          evaluation.properties.tokenErrors2.lexical = new SpeechServicesApiVersion20241115.EditsSummary();
          evaluation.properties.tokenErrors2.others = new SpeechServicesApiVersion20241115.EditsSummary();
          evaluation.properties.error = new SpeechServicesApiVersion20241115.EntityError();
          evaluation.status = new SpeechServicesApiVersion20241115.Status();

          instance.evaluationsCreate(apiVersion, evaluation, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(SpeechServicesApiVersion20241115.Evaluation);
            expect(data.displayName).to.be.a('string');
            expect(data.displayName).to.be("");
            expect(data.description).to.be.a('string');
            expect(data.description).to.be("");
            {
              let dataCtr = data.customProperties;
              expect(dataCtr).to.be.an(Object);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }
            expect(data.self).to.be.a('string');
            expect(data.self).to.be("");
            expect(data.createdDateTime).to.be.a(Date);
            expect(data.createdDateTime).to.be(new Date());
            expect(data.lastActionDateTime).to.be.a(Date);
            expect(data.lastActionDateTime).to.be(new Date());
            expect(data.model1).to.be.a(SpeechServicesApiVersion20241115.EntityReference);
                  expect(data.model1.self).to.be.a('string');
              expect(data.model1.self).to.be("");
            expect(data.model2).to.be.a(SpeechServicesApiVersion20241115.EntityReference);
                  expect(data.model2.self).to.be.a('string');
              expect(data.model2.self).to.be("");
            expect(data.dataset).to.be.a(SpeechServicesApiVersion20241115.EntityReference);
                  expect(data.dataset.self).to.be.a('string');
              expect(data.dataset.self).to.be("");
            expect(data.transcription1).to.be.a(SpeechServicesApiVersion20241115.EntityReference);
                  expect(data.transcription1.self).to.be.a('string');
              expect(data.transcription1.self).to.be("");
            expect(data.transcription2).to.be.a(SpeechServicesApiVersion20241115.EntityReference);
                  expect(data.transcription2.self).to.be.a('string');
              expect(data.transcription2.self).to.be("");
            expect(data.links).to.be.a(SpeechServicesApiVersion20241115.EvaluationLinks);
                  expect(data.links.files).to.be.a('string');
              expect(data.links.files).to.be("");
            expect(data.locale).to.be.a('string');
            expect(data.locale).to.be("");
            expect(data.properties).to.be.a(SpeechServicesApiVersion20241115.EvaluationProperties);
                  expect(data.properties.wordErrorRate1).to.be.a('number');
              expect(data.properties.wordErrorRate1).to.be(0.0);
              expect(data.properties.sentenceErrorRate1).to.be.a('number');
              expect(data.properties.sentenceErrorRate1).to.be(0.0);
              expect(data.properties.tokenErrorRate1).to.be.a('number');
              expect(data.properties.tokenErrorRate1).to.be(0.0);
              expect(data.properties.sentenceCount1).to.be.a('number');
              expect(data.properties.sentenceCount1).to.be(0);
              expect(data.properties.wordCount1).to.be.a('number');
              expect(data.properties.wordCount1).to.be(0);
              expect(data.properties.correctWordCount1).to.be.a('number');
              expect(data.properties.correctWordCount1).to.be(0);
              expect(data.properties.wordSubstitutionCount1).to.be.a('number');
              expect(data.properties.wordSubstitutionCount1).to.be(0);
              expect(data.properties.wordDeletionCount1).to.be.a('number');
              expect(data.properties.wordDeletionCount1).to.be(0);
              expect(data.properties.wordInsertionCount1).to.be.a('number');
              expect(data.properties.wordInsertionCount1).to.be(0);
              expect(data.properties.tokenCount1).to.be.a('number');
              expect(data.properties.tokenCount1).to.be(0);
              expect(data.properties.correctTokenCount1).to.be.a('number');
              expect(data.properties.correctTokenCount1).to.be(0);
              expect(data.properties.tokenSubstitutionCount1).to.be.a('number');
              expect(data.properties.tokenSubstitutionCount1).to.be(0);
              expect(data.properties.tokenDeletionCount1).to.be.a('number');
              expect(data.properties.tokenDeletionCount1).to.be(0);
              expect(data.properties.tokenInsertionCount1).to.be.a('number');
              expect(data.properties.tokenInsertionCount1).to.be(0);
              expect(data.properties.tokenErrors1).to.be.a(SpeechServicesApiVersion20241115.TokenErrorDetails);
                    expect(data.properties.tokenErrors1.punctuation).to.be.a(SpeechServicesApiVersion20241115.EditsSummary);
                      expect(data.properties.tokenErrors1.punctuation.numberOfEdits).to.be.a('number');
                  expect(data.properties.tokenErrors1.punctuation.numberOfEdits).to.be(0);
                  expect(data.properties.tokenErrors1.punctuation.percentageOfAllEdits).to.be.a('number');
                  expect(data.properties.tokenErrors1.punctuation.percentageOfAllEdits).to.be(0.0);
                expect(data.properties.tokenErrors1.capitalization).to.be.a(SpeechServicesApiVersion20241115.EditsSummary);
                      expect(data.properties.tokenErrors1.capitalization.numberOfEdits).to.be.a('number');
                  expect(data.properties.tokenErrors1.capitalization.numberOfEdits).to.be(0);
                  expect(data.properties.tokenErrors1.capitalization.percentageOfAllEdits).to.be.a('number');
                  expect(data.properties.tokenErrors1.capitalization.percentageOfAllEdits).to.be(0.0);
                expect(data.properties.tokenErrors1.inverseTextNormalization).to.be.a(SpeechServicesApiVersion20241115.EditsSummary);
                      expect(data.properties.tokenErrors1.inverseTextNormalization.numberOfEdits).to.be.a('number');
                  expect(data.properties.tokenErrors1.inverseTextNormalization.numberOfEdits).to.be(0);
                  expect(data.properties.tokenErrors1.inverseTextNormalization.percentageOfAllEdits).to.be.a('number');
                  expect(data.properties.tokenErrors1.inverseTextNormalization.percentageOfAllEdits).to.be(0.0);
                expect(data.properties.tokenErrors1.lexical).to.be.a(SpeechServicesApiVersion20241115.EditsSummary);
                      expect(data.properties.tokenErrors1.lexical.numberOfEdits).to.be.a('number');
                  expect(data.properties.tokenErrors1.lexical.numberOfEdits).to.be(0);
                  expect(data.properties.tokenErrors1.lexical.percentageOfAllEdits).to.be.a('number');
                  expect(data.properties.tokenErrors1.lexical.percentageOfAllEdits).to.be(0.0);
                expect(data.properties.tokenErrors1.others).to.be.a(SpeechServicesApiVersion20241115.EditsSummary);
                      expect(data.properties.tokenErrors1.others.numberOfEdits).to.be.a('number');
                  expect(data.properties.tokenErrors1.others.numberOfEdits).to.be(0);
                  expect(data.properties.tokenErrors1.others.percentageOfAllEdits).to.be.a('number');
                  expect(data.properties.tokenErrors1.others.percentageOfAllEdits).to.be(0.0);
              expect(data.properties.wordErrorRate2).to.be.a('number');
              expect(data.properties.wordErrorRate2).to.be(0.0);
              expect(data.properties.sentenceErrorRate2).to.be.a('number');
              expect(data.properties.sentenceErrorRate2).to.be(0.0);
              expect(data.properties.tokenErrorRate2).to.be.a('number');
              expect(data.properties.tokenErrorRate2).to.be(0.0);
              expect(data.properties.sentenceCount2).to.be.a('number');
              expect(data.properties.sentenceCount2).to.be(0);
              expect(data.properties.wordCount2).to.be.a('number');
              expect(data.properties.wordCount2).to.be(0);
              expect(data.properties.correctWordCount2).to.be.a('number');
              expect(data.properties.correctWordCount2).to.be(0);
              expect(data.properties.wordSubstitutionCount2).to.be.a('number');
              expect(data.properties.wordSubstitutionCount2).to.be(0);
              expect(data.properties.wordDeletionCount2).to.be.a('number');
              expect(data.properties.wordDeletionCount2).to.be(0);
              expect(data.properties.wordInsertionCount2).to.be.a('number');
              expect(data.properties.wordInsertionCount2).to.be(0);
              expect(data.properties.tokenCount2).to.be.a('number');
              expect(data.properties.tokenCount2).to.be(0);
              expect(data.properties.correctTokenCount2).to.be.a('number');
              expect(data.properties.correctTokenCount2).to.be(0);
              expect(data.properties.tokenSubstitutionCount2).to.be.a('number');
              expect(data.properties.tokenSubstitutionCount2).to.be(0);
              expect(data.properties.tokenDeletionCount2).to.be.a('number');
              expect(data.properties.tokenDeletionCount2).to.be(0);
              expect(data.properties.tokenInsertionCount2).to.be.a('number');
              expect(data.properties.tokenInsertionCount2).to.be(0);
              expect(data.properties.tokenErrors2).to.be.a(SpeechServicesApiVersion20241115.TokenErrorDetails);
                    expect(data.properties.tokenErrors2.punctuation).to.be.a(SpeechServicesApiVersion20241115.EditsSummary);
                      expect(data.properties.tokenErrors2.punctuation.numberOfEdits).to.be.a('number');
                  expect(data.properties.tokenErrors2.punctuation.numberOfEdits).to.be(0);
                  expect(data.properties.tokenErrors2.punctuation.percentageOfAllEdits).to.be.a('number');
                  expect(data.properties.tokenErrors2.punctuation.percentageOfAllEdits).to.be(0.0);
                expect(data.properties.tokenErrors2.capitalization).to.be.a(SpeechServicesApiVersion20241115.EditsSummary);
                      expect(data.properties.tokenErrors2.capitalization.numberOfEdits).to.be.a('number');
                  expect(data.properties.tokenErrors2.capitalization.numberOfEdits).to.be(0);
                  expect(data.properties.tokenErrors2.capitalization.percentageOfAllEdits).to.be.a('number');
                  expect(data.properties.tokenErrors2.capitalization.percentageOfAllEdits).to.be(0.0);
                expect(data.properties.tokenErrors2.inverseTextNormalization).to.be.a(SpeechServicesApiVersion20241115.EditsSummary);
                      expect(data.properties.tokenErrors2.inverseTextNormalization.numberOfEdits).to.be.a('number');
                  expect(data.properties.tokenErrors2.inverseTextNormalization.numberOfEdits).to.be(0);
                  expect(data.properties.tokenErrors2.inverseTextNormalization.percentageOfAllEdits).to.be.a('number');
                  expect(data.properties.tokenErrors2.inverseTextNormalization.percentageOfAllEdits).to.be(0.0);
                expect(data.properties.tokenErrors2.lexical).to.be.a(SpeechServicesApiVersion20241115.EditsSummary);
                      expect(data.properties.tokenErrors2.lexical.numberOfEdits).to.be.a('number');
                  expect(data.properties.tokenErrors2.lexical.numberOfEdits).to.be(0);
                  expect(data.properties.tokenErrors2.lexical.percentageOfAllEdits).to.be.a('number');
                  expect(data.properties.tokenErrors2.lexical.percentageOfAllEdits).to.be(0.0);
                expect(data.properties.tokenErrors2.others).to.be.a(SpeechServicesApiVersion20241115.EditsSummary);
                      expect(data.properties.tokenErrors2.others.numberOfEdits).to.be.a('number');
                  expect(data.properties.tokenErrors2.others.numberOfEdits).to.be(0);
                  expect(data.properties.tokenErrors2.others.percentageOfAllEdits).to.be.a('number');
                  expect(data.properties.tokenErrors2.others.percentageOfAllEdits).to.be(0.0);
              expect(data.properties.error).to.be.a(SpeechServicesApiVersion20241115.EntityError);
                    expect(data.properties.error.code).to.be.a('string');
                expect(data.properties.error.code).to.be("");
                expect(data.properties.error.message).to.be.a('string');
                expect(data.properties.error.message).to.be("");
            expect(data.status).to.be.a(SpeechServicesApiVersion20241115.Status);
    
            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('evaluationsDelete', function() {
        it('should call evaluationsDelete successfully', function(done) {
          // TODO: uncomment, update parameter values for evaluationsDelete call
          /*
          var id = "id_example";
          var apiVersion = "apiVersion_example";

          instance.evaluationsDelete(id, apiVersion, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('evaluationsGet', function() {
        it('should call evaluationsGet successfully', function(done) {
          // TODO: uncomment, update parameter values for evaluationsGet call and complete the assertions
          /*
          var id = "id_example";
          var apiVersion = "apiVersion_example";

          instance.evaluationsGet(id, apiVersion, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(SpeechServicesApiVersion20241115.Evaluation);
            expect(data.displayName).to.be.a('string');
            expect(data.displayName).to.be("");
            expect(data.description).to.be.a('string');
            expect(data.description).to.be("");
            {
              let dataCtr = data.customProperties;
              expect(dataCtr).to.be.an(Object);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }
            expect(data.self).to.be.a('string');
            expect(data.self).to.be("");
            expect(data.createdDateTime).to.be.a(Date);
            expect(data.createdDateTime).to.be(new Date());
            expect(data.lastActionDateTime).to.be.a(Date);
            expect(data.lastActionDateTime).to.be(new Date());
            expect(data.model1).to.be.a(SpeechServicesApiVersion20241115.EntityReference);
                  expect(data.model1.self).to.be.a('string');
              expect(data.model1.self).to.be("");
            expect(data.model2).to.be.a(SpeechServicesApiVersion20241115.EntityReference);
                  expect(data.model2.self).to.be.a('string');
              expect(data.model2.self).to.be("");
            expect(data.dataset).to.be.a(SpeechServicesApiVersion20241115.EntityReference);
                  expect(data.dataset.self).to.be.a('string');
              expect(data.dataset.self).to.be("");
            expect(data.transcription1).to.be.a(SpeechServicesApiVersion20241115.EntityReference);
                  expect(data.transcription1.self).to.be.a('string');
              expect(data.transcription1.self).to.be("");
            expect(data.transcription2).to.be.a(SpeechServicesApiVersion20241115.EntityReference);
                  expect(data.transcription2.self).to.be.a('string');
              expect(data.transcription2.self).to.be("");
            expect(data.links).to.be.a(SpeechServicesApiVersion20241115.EvaluationLinks);
                  expect(data.links.files).to.be.a('string');
              expect(data.links.files).to.be("");
            expect(data.locale).to.be.a('string');
            expect(data.locale).to.be("");
            expect(data.properties).to.be.a(SpeechServicesApiVersion20241115.EvaluationProperties);
                  expect(data.properties.wordErrorRate1).to.be.a('number');
              expect(data.properties.wordErrorRate1).to.be(0.0);
              expect(data.properties.sentenceErrorRate1).to.be.a('number');
              expect(data.properties.sentenceErrorRate1).to.be(0.0);
              expect(data.properties.tokenErrorRate1).to.be.a('number');
              expect(data.properties.tokenErrorRate1).to.be(0.0);
              expect(data.properties.sentenceCount1).to.be.a('number');
              expect(data.properties.sentenceCount1).to.be(0);
              expect(data.properties.wordCount1).to.be.a('number');
              expect(data.properties.wordCount1).to.be(0);
              expect(data.properties.correctWordCount1).to.be.a('number');
              expect(data.properties.correctWordCount1).to.be(0);
              expect(data.properties.wordSubstitutionCount1).to.be.a('number');
              expect(data.properties.wordSubstitutionCount1).to.be(0);
              expect(data.properties.wordDeletionCount1).to.be.a('number');
              expect(data.properties.wordDeletionCount1).to.be(0);
              expect(data.properties.wordInsertionCount1).to.be.a('number');
              expect(data.properties.wordInsertionCount1).to.be(0);
              expect(data.properties.tokenCount1).to.be.a('number');
              expect(data.properties.tokenCount1).to.be(0);
              expect(data.properties.correctTokenCount1).to.be.a('number');
              expect(data.properties.correctTokenCount1).to.be(0);
              expect(data.properties.tokenSubstitutionCount1).to.be.a('number');
              expect(data.properties.tokenSubstitutionCount1).to.be(0);
              expect(data.properties.tokenDeletionCount1).to.be.a('number');
              expect(data.properties.tokenDeletionCount1).to.be(0);
              expect(data.properties.tokenInsertionCount1).to.be.a('number');
              expect(data.properties.tokenInsertionCount1).to.be(0);
              expect(data.properties.tokenErrors1).to.be.a(SpeechServicesApiVersion20241115.TokenErrorDetails);
                    expect(data.properties.tokenErrors1.punctuation).to.be.a(SpeechServicesApiVersion20241115.EditsSummary);
                      expect(data.properties.tokenErrors1.punctuation.numberOfEdits).to.be.a('number');
                  expect(data.properties.tokenErrors1.punctuation.numberOfEdits).to.be(0);
                  expect(data.properties.tokenErrors1.punctuation.percentageOfAllEdits).to.be.a('number');
                  expect(data.properties.tokenErrors1.punctuation.percentageOfAllEdits).to.be(0.0);
                expect(data.properties.tokenErrors1.capitalization).to.be.a(SpeechServicesApiVersion20241115.EditsSummary);
                      expect(data.properties.tokenErrors1.capitalization.numberOfEdits).to.be.a('number');
                  expect(data.properties.tokenErrors1.capitalization.numberOfEdits).to.be(0);
                  expect(data.properties.tokenErrors1.capitalization.percentageOfAllEdits).to.be.a('number');
                  expect(data.properties.tokenErrors1.capitalization.percentageOfAllEdits).to.be(0.0);
                expect(data.properties.tokenErrors1.inverseTextNormalization).to.be.a(SpeechServicesApiVersion20241115.EditsSummary);
                      expect(data.properties.tokenErrors1.inverseTextNormalization.numberOfEdits).to.be.a('number');
                  expect(data.properties.tokenErrors1.inverseTextNormalization.numberOfEdits).to.be(0);
                  expect(data.properties.tokenErrors1.inverseTextNormalization.percentageOfAllEdits).to.be.a('number');
                  expect(data.properties.tokenErrors1.inverseTextNormalization.percentageOfAllEdits).to.be(0.0);
                expect(data.properties.tokenErrors1.lexical).to.be.a(SpeechServicesApiVersion20241115.EditsSummary);
                      expect(data.properties.tokenErrors1.lexical.numberOfEdits).to.be.a('number');
                  expect(data.properties.tokenErrors1.lexical.numberOfEdits).to.be(0);
                  expect(data.properties.tokenErrors1.lexical.percentageOfAllEdits).to.be.a('number');
                  expect(data.properties.tokenErrors1.lexical.percentageOfAllEdits).to.be(0.0);
                expect(data.properties.tokenErrors1.others).to.be.a(SpeechServicesApiVersion20241115.EditsSummary);
                      expect(data.properties.tokenErrors1.others.numberOfEdits).to.be.a('number');
                  expect(data.properties.tokenErrors1.others.numberOfEdits).to.be(0);
                  expect(data.properties.tokenErrors1.others.percentageOfAllEdits).to.be.a('number');
                  expect(data.properties.tokenErrors1.others.percentageOfAllEdits).to.be(0.0);
              expect(data.properties.wordErrorRate2).to.be.a('number');
              expect(data.properties.wordErrorRate2).to.be(0.0);
              expect(data.properties.sentenceErrorRate2).to.be.a('number');
              expect(data.properties.sentenceErrorRate2).to.be(0.0);
              expect(data.properties.tokenErrorRate2).to.be.a('number');
              expect(data.properties.tokenErrorRate2).to.be(0.0);
              expect(data.properties.sentenceCount2).to.be.a('number');
              expect(data.properties.sentenceCount2).to.be(0);
              expect(data.properties.wordCount2).to.be.a('number');
              expect(data.properties.wordCount2).to.be(0);
              expect(data.properties.correctWordCount2).to.be.a('number');
              expect(data.properties.correctWordCount2).to.be(0);
              expect(data.properties.wordSubstitutionCount2).to.be.a('number');
              expect(data.properties.wordSubstitutionCount2).to.be(0);
              expect(data.properties.wordDeletionCount2).to.be.a('number');
              expect(data.properties.wordDeletionCount2).to.be(0);
              expect(data.properties.wordInsertionCount2).to.be.a('number');
              expect(data.properties.wordInsertionCount2).to.be(0);
              expect(data.properties.tokenCount2).to.be.a('number');
              expect(data.properties.tokenCount2).to.be(0);
              expect(data.properties.correctTokenCount2).to.be.a('number');
              expect(data.properties.correctTokenCount2).to.be(0);
              expect(data.properties.tokenSubstitutionCount2).to.be.a('number');
              expect(data.properties.tokenSubstitutionCount2).to.be(0);
              expect(data.properties.tokenDeletionCount2).to.be.a('number');
              expect(data.properties.tokenDeletionCount2).to.be(0);
              expect(data.properties.tokenInsertionCount2).to.be.a('number');
              expect(data.properties.tokenInsertionCount2).to.be(0);
              expect(data.properties.tokenErrors2).to.be.a(SpeechServicesApiVersion20241115.TokenErrorDetails);
                    expect(data.properties.tokenErrors2.punctuation).to.be.a(SpeechServicesApiVersion20241115.EditsSummary);
                      expect(data.properties.tokenErrors2.punctuation.numberOfEdits).to.be.a('number');
                  expect(data.properties.tokenErrors2.punctuation.numberOfEdits).to.be(0);
                  expect(data.properties.tokenErrors2.punctuation.percentageOfAllEdits).to.be.a('number');
                  expect(data.properties.tokenErrors2.punctuation.percentageOfAllEdits).to.be(0.0);
                expect(data.properties.tokenErrors2.capitalization).to.be.a(SpeechServicesApiVersion20241115.EditsSummary);
                      expect(data.properties.tokenErrors2.capitalization.numberOfEdits).to.be.a('number');
                  expect(data.properties.tokenErrors2.capitalization.numberOfEdits).to.be(0);
                  expect(data.properties.tokenErrors2.capitalization.percentageOfAllEdits).to.be.a('number');
                  expect(data.properties.tokenErrors2.capitalization.percentageOfAllEdits).to.be(0.0);
                expect(data.properties.tokenErrors2.inverseTextNormalization).to.be.a(SpeechServicesApiVersion20241115.EditsSummary);
                      expect(data.properties.tokenErrors2.inverseTextNormalization.numberOfEdits).to.be.a('number');
                  expect(data.properties.tokenErrors2.inverseTextNormalization.numberOfEdits).to.be(0);
                  expect(data.properties.tokenErrors2.inverseTextNormalization.percentageOfAllEdits).to.be.a('number');
                  expect(data.properties.tokenErrors2.inverseTextNormalization.percentageOfAllEdits).to.be(0.0);
                expect(data.properties.tokenErrors2.lexical).to.be.a(SpeechServicesApiVersion20241115.EditsSummary);
                      expect(data.properties.tokenErrors2.lexical.numberOfEdits).to.be.a('number');
                  expect(data.properties.tokenErrors2.lexical.numberOfEdits).to.be(0);
                  expect(data.properties.tokenErrors2.lexical.percentageOfAllEdits).to.be.a('number');
                  expect(data.properties.tokenErrors2.lexical.percentageOfAllEdits).to.be(0.0);
                expect(data.properties.tokenErrors2.others).to.be.a(SpeechServicesApiVersion20241115.EditsSummary);
                      expect(data.properties.tokenErrors2.others.numberOfEdits).to.be.a('number');
                  expect(data.properties.tokenErrors2.others.numberOfEdits).to.be(0);
                  expect(data.properties.tokenErrors2.others.percentageOfAllEdits).to.be.a('number');
                  expect(data.properties.tokenErrors2.others.percentageOfAllEdits).to.be(0.0);
              expect(data.properties.error).to.be.a(SpeechServicesApiVersion20241115.EntityError);
                    expect(data.properties.error.code).to.be.a('string');
                expect(data.properties.error.code).to.be("");
                expect(data.properties.error.message).to.be.a('string');
                expect(data.properties.error.message).to.be("");
            expect(data.status).to.be.a(SpeechServicesApiVersion20241115.Status);
    
            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('evaluationsGetFile', function() {
        it('should call evaluationsGetFile successfully', function(done) {
          // TODO: uncomment, update parameter values for evaluationsGetFile call and complete the assertions
          /*
          var id = "id_example";
          var fileId = "fileId_example";
          var apiVersion = "apiVersion_example";
          var opts = {};
          opts.sasLifetimeMinutes = 56;

          instance.evaluationsGetFile(id, fileId, apiVersion, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(File);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('evaluationsList', function() {
        it('should call evaluationsList successfully', function(done) {
          // TODO: uncomment, update parameter values for evaluationsList call and complete the assertions
          /*
          var apiVersion = "apiVersion_example";
          var opts = {};
          opts.skip = 56;
          opts.top = 56;
          opts.filter = "filter_example";

          instance.evaluationsList(apiVersion, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(SpeechServicesApiVersion20241115.PaginatedEvaluations);
            {
              let dataCtr = data.values;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(SpeechServicesApiVersion20241115.Evaluation);
                expect(data.displayName).to.be.a('string');
                expect(data.displayName).to.be("");
                expect(data.description).to.be.a('string');
                expect(data.description).to.be("");
                {
                  let dataCtr = data.customProperties;
                  expect(dataCtr).to.be.an(Object);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("");
                  }
                }
                expect(data.self).to.be.a('string');
                expect(data.self).to.be("");
                expect(data.createdDateTime).to.be.a(Date);
                expect(data.createdDateTime).to.be(new Date());
                expect(data.lastActionDateTime).to.be.a(Date);
                expect(data.lastActionDateTime).to.be(new Date());
                expect(data.model1).to.be.a(SpeechServicesApiVersion20241115.EntityReference);
                      expect(data.model1.self).to.be.a('string');
                  expect(data.model1.self).to.be("");
                expect(data.model2).to.be.a(SpeechServicesApiVersion20241115.EntityReference);
                      expect(data.model2.self).to.be.a('string');
                  expect(data.model2.self).to.be("");
                expect(data.dataset).to.be.a(SpeechServicesApiVersion20241115.EntityReference);
                      expect(data.dataset.self).to.be.a('string');
                  expect(data.dataset.self).to.be("");
                expect(data.transcription1).to.be.a(SpeechServicesApiVersion20241115.EntityReference);
                      expect(data.transcription1.self).to.be.a('string');
                  expect(data.transcription1.self).to.be("");
                expect(data.transcription2).to.be.a(SpeechServicesApiVersion20241115.EntityReference);
                      expect(data.transcription2.self).to.be.a('string');
                  expect(data.transcription2.self).to.be("");
                expect(data.links).to.be.a(SpeechServicesApiVersion20241115.EvaluationLinks);
                      expect(data.links.files).to.be.a('string');
                  expect(data.links.files).to.be("");
                expect(data.locale).to.be.a('string');
                expect(data.locale).to.be("");
                expect(data.properties).to.be.a(SpeechServicesApiVersion20241115.EvaluationProperties);
                      expect(data.properties.wordErrorRate1).to.be.a('number');
                  expect(data.properties.wordErrorRate1).to.be(0.0);
                  expect(data.properties.sentenceErrorRate1).to.be.a('number');
                  expect(data.properties.sentenceErrorRate1).to.be(0.0);
                  expect(data.properties.tokenErrorRate1).to.be.a('number');
                  expect(data.properties.tokenErrorRate1).to.be(0.0);
                  expect(data.properties.sentenceCount1).to.be.a('number');
                  expect(data.properties.sentenceCount1).to.be(0);
                  expect(data.properties.wordCount1).to.be.a('number');
                  expect(data.properties.wordCount1).to.be(0);
                  expect(data.properties.correctWordCount1).to.be.a('number');
                  expect(data.properties.correctWordCount1).to.be(0);
                  expect(data.properties.wordSubstitutionCount1).to.be.a('number');
                  expect(data.properties.wordSubstitutionCount1).to.be(0);
                  expect(data.properties.wordDeletionCount1).to.be.a('number');
                  expect(data.properties.wordDeletionCount1).to.be(0);
                  expect(data.properties.wordInsertionCount1).to.be.a('number');
                  expect(data.properties.wordInsertionCount1).to.be(0);
                  expect(data.properties.tokenCount1).to.be.a('number');
                  expect(data.properties.tokenCount1).to.be(0);
                  expect(data.properties.correctTokenCount1).to.be.a('number');
                  expect(data.properties.correctTokenCount1).to.be(0);
                  expect(data.properties.tokenSubstitutionCount1).to.be.a('number');
                  expect(data.properties.tokenSubstitutionCount1).to.be(0);
                  expect(data.properties.tokenDeletionCount1).to.be.a('number');
                  expect(data.properties.tokenDeletionCount1).to.be(0);
                  expect(data.properties.tokenInsertionCount1).to.be.a('number');
                  expect(data.properties.tokenInsertionCount1).to.be(0);
                  expect(data.properties.tokenErrors1).to.be.a(SpeechServicesApiVersion20241115.TokenErrorDetails);
                        expect(data.properties.tokenErrors1.punctuation).to.be.a(SpeechServicesApiVersion20241115.EditsSummary);
                          expect(data.properties.tokenErrors1.punctuation.numberOfEdits).to.be.a('number');
                      expect(data.properties.tokenErrors1.punctuation.numberOfEdits).to.be(0);
                      expect(data.properties.tokenErrors1.punctuation.percentageOfAllEdits).to.be.a('number');
                      expect(data.properties.tokenErrors1.punctuation.percentageOfAllEdits).to.be(0.0);
                    expect(data.properties.tokenErrors1.capitalization).to.be.a(SpeechServicesApiVersion20241115.EditsSummary);
                          expect(data.properties.tokenErrors1.capitalization.numberOfEdits).to.be.a('number');
                      expect(data.properties.tokenErrors1.capitalization.numberOfEdits).to.be(0);
                      expect(data.properties.tokenErrors1.capitalization.percentageOfAllEdits).to.be.a('number');
                      expect(data.properties.tokenErrors1.capitalization.percentageOfAllEdits).to.be(0.0);
                    expect(data.properties.tokenErrors1.inverseTextNormalization).to.be.a(SpeechServicesApiVersion20241115.EditsSummary);
                          expect(data.properties.tokenErrors1.inverseTextNormalization.numberOfEdits).to.be.a('number');
                      expect(data.properties.tokenErrors1.inverseTextNormalization.numberOfEdits).to.be(0);
                      expect(data.properties.tokenErrors1.inverseTextNormalization.percentageOfAllEdits).to.be.a('number');
                      expect(data.properties.tokenErrors1.inverseTextNormalization.percentageOfAllEdits).to.be(0.0);
                    expect(data.properties.tokenErrors1.lexical).to.be.a(SpeechServicesApiVersion20241115.EditsSummary);
                          expect(data.properties.tokenErrors1.lexical.numberOfEdits).to.be.a('number');
                      expect(data.properties.tokenErrors1.lexical.numberOfEdits).to.be(0);
                      expect(data.properties.tokenErrors1.lexical.percentageOfAllEdits).to.be.a('number');
                      expect(data.properties.tokenErrors1.lexical.percentageOfAllEdits).to.be(0.0);
                    expect(data.properties.tokenErrors1.others).to.be.a(SpeechServicesApiVersion20241115.EditsSummary);
                          expect(data.properties.tokenErrors1.others.numberOfEdits).to.be.a('number');
                      expect(data.properties.tokenErrors1.others.numberOfEdits).to.be(0);
                      expect(data.properties.tokenErrors1.others.percentageOfAllEdits).to.be.a('number');
                      expect(data.properties.tokenErrors1.others.percentageOfAllEdits).to.be(0.0);
                  expect(data.properties.wordErrorRate2).to.be.a('number');
                  expect(data.properties.wordErrorRate2).to.be(0.0);
                  expect(data.properties.sentenceErrorRate2).to.be.a('number');
                  expect(data.properties.sentenceErrorRate2).to.be(0.0);
                  expect(data.properties.tokenErrorRate2).to.be.a('number');
                  expect(data.properties.tokenErrorRate2).to.be(0.0);
                  expect(data.properties.sentenceCount2).to.be.a('number');
                  expect(data.properties.sentenceCount2).to.be(0);
                  expect(data.properties.wordCount2).to.be.a('number');
                  expect(data.properties.wordCount2).to.be(0);
                  expect(data.properties.correctWordCount2).to.be.a('number');
                  expect(data.properties.correctWordCount2).to.be(0);
                  expect(data.properties.wordSubstitutionCount2).to.be.a('number');
                  expect(data.properties.wordSubstitutionCount2).to.be(0);
                  expect(data.properties.wordDeletionCount2).to.be.a('number');
                  expect(data.properties.wordDeletionCount2).to.be(0);
                  expect(data.properties.wordInsertionCount2).to.be.a('number');
                  expect(data.properties.wordInsertionCount2).to.be(0);
                  expect(data.properties.tokenCount2).to.be.a('number');
                  expect(data.properties.tokenCount2).to.be(0);
                  expect(data.properties.correctTokenCount2).to.be.a('number');
                  expect(data.properties.correctTokenCount2).to.be(0);
                  expect(data.properties.tokenSubstitutionCount2).to.be.a('number');
                  expect(data.properties.tokenSubstitutionCount2).to.be(0);
                  expect(data.properties.tokenDeletionCount2).to.be.a('number');
                  expect(data.properties.tokenDeletionCount2).to.be(0);
                  expect(data.properties.tokenInsertionCount2).to.be.a('number');
                  expect(data.properties.tokenInsertionCount2).to.be(0);
                  expect(data.properties.tokenErrors2).to.be.a(SpeechServicesApiVersion20241115.TokenErrorDetails);
                        expect(data.properties.tokenErrors2.punctuation).to.be.a(SpeechServicesApiVersion20241115.EditsSummary);
                          expect(data.properties.tokenErrors2.punctuation.numberOfEdits).to.be.a('number');
                      expect(data.properties.tokenErrors2.punctuation.numberOfEdits).to.be(0);
                      expect(data.properties.tokenErrors2.punctuation.percentageOfAllEdits).to.be.a('number');
                      expect(data.properties.tokenErrors2.punctuation.percentageOfAllEdits).to.be(0.0);
                    expect(data.properties.tokenErrors2.capitalization).to.be.a(SpeechServicesApiVersion20241115.EditsSummary);
                          expect(data.properties.tokenErrors2.capitalization.numberOfEdits).to.be.a('number');
                      expect(data.properties.tokenErrors2.capitalization.numberOfEdits).to.be(0);
                      expect(data.properties.tokenErrors2.capitalization.percentageOfAllEdits).to.be.a('number');
                      expect(data.properties.tokenErrors2.capitalization.percentageOfAllEdits).to.be(0.0);
                    expect(data.properties.tokenErrors2.inverseTextNormalization).to.be.a(SpeechServicesApiVersion20241115.EditsSummary);
                          expect(data.properties.tokenErrors2.inverseTextNormalization.numberOfEdits).to.be.a('number');
                      expect(data.properties.tokenErrors2.inverseTextNormalization.numberOfEdits).to.be(0);
                      expect(data.properties.tokenErrors2.inverseTextNormalization.percentageOfAllEdits).to.be.a('number');
                      expect(data.properties.tokenErrors2.inverseTextNormalization.percentageOfAllEdits).to.be(0.0);
                    expect(data.properties.tokenErrors2.lexical).to.be.a(SpeechServicesApiVersion20241115.EditsSummary);
                          expect(data.properties.tokenErrors2.lexical.numberOfEdits).to.be.a('number');
                      expect(data.properties.tokenErrors2.lexical.numberOfEdits).to.be(0);
                      expect(data.properties.tokenErrors2.lexical.percentageOfAllEdits).to.be.a('number');
                      expect(data.properties.tokenErrors2.lexical.percentageOfAllEdits).to.be(0.0);
                    expect(data.properties.tokenErrors2.others).to.be.a(SpeechServicesApiVersion20241115.EditsSummary);
                          expect(data.properties.tokenErrors2.others.numberOfEdits).to.be.a('number');
                      expect(data.properties.tokenErrors2.others.numberOfEdits).to.be(0);
                      expect(data.properties.tokenErrors2.others.percentageOfAllEdits).to.be.a('number');
                      expect(data.properties.tokenErrors2.others.percentageOfAllEdits).to.be(0.0);
                  expect(data.properties.error).to.be.a(SpeechServicesApiVersion20241115.EntityError);
                        expect(data.properties.error.code).to.be.a('string');
                    expect(data.properties.error.code).to.be("");
                    expect(data.properties.error.message).to.be.a('string');
                    expect(data.properties.error.message).to.be("");
                expect(data.status).to.be.a(SpeechServicesApiVersion20241115.Status);
        

                      }
            }
            expect(data.nextLink).to.be.a('string');
            expect(data.nextLink).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('evaluationsListFiles', function() {
        it('should call evaluationsListFiles successfully', function(done) {
          // TODO: uncomment, update parameter values for evaluationsListFiles call and complete the assertions
          /*
          var id = "id_example";
          var apiVersion = "apiVersion_example";
          var opts = {};
          opts.sasLifetimeMinutes = 56;
          opts.skip = 56;
          opts.top = 56;
          opts.filter = "filter_example";

          instance.evaluationsListFiles(id, apiVersion, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(SpeechServicesApiVersion20241115.PaginatedFiles);
            {
              let dataCtr = data.values;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(File);
                expect(data).to.be();
              }
            }
            expect(data.nextLink).to.be.a('string');
            expect(data.nextLink).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('evaluationsListSupportedLocales', function() {
        it('should call evaluationsListSupportedLocales successfully', function(done) {
          // TODO: uncomment, update parameter values for evaluationsListSupportedLocales call and complete the assertions
          /*
          var apiVersion = "apiVersion_example";

          instance.evaluationsListSupportedLocales(apiVersion, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a('string');
              // expect(data).to.be(null);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('evaluationsUpdate', function() {
        it('should call evaluationsUpdate successfully', function(done) {
          // TODO: uncomment, update parameter values for evaluationsUpdate call and complete the assertions
          /*
          var id = "id_example";
          var apiVersion = "apiVersion_example";
          var evaluationUpdate = new SpeechServicesApiVersion20241115.EvaluationUpdate();
          evaluationUpdate.displayName = "";
          evaluationUpdate.description = "";
          evaluationUpdate.customProperties = {key: ""};

          instance.evaluationsUpdate(id, apiVersion, evaluationUpdate, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(SpeechServicesApiVersion20241115.Evaluation);
            expect(data.displayName).to.be.a('string');
            expect(data.displayName).to.be("");
            expect(data.description).to.be.a('string');
            expect(data.description).to.be("");
            {
              let dataCtr = data.customProperties;
              expect(dataCtr).to.be.an(Object);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }
            expect(data.self).to.be.a('string');
            expect(data.self).to.be("");
            expect(data.createdDateTime).to.be.a(Date);
            expect(data.createdDateTime).to.be(new Date());
            expect(data.lastActionDateTime).to.be.a(Date);
            expect(data.lastActionDateTime).to.be(new Date());
            expect(data.model1).to.be.a(SpeechServicesApiVersion20241115.EntityReference);
                  expect(data.model1.self).to.be.a('string');
              expect(data.model1.self).to.be("");
            expect(data.model2).to.be.a(SpeechServicesApiVersion20241115.EntityReference);
                  expect(data.model2.self).to.be.a('string');
              expect(data.model2.self).to.be("");
            expect(data.dataset).to.be.a(SpeechServicesApiVersion20241115.EntityReference);
                  expect(data.dataset.self).to.be.a('string');
              expect(data.dataset.self).to.be("");
            expect(data.transcription1).to.be.a(SpeechServicesApiVersion20241115.EntityReference);
                  expect(data.transcription1.self).to.be.a('string');
              expect(data.transcription1.self).to.be("");
            expect(data.transcription2).to.be.a(SpeechServicesApiVersion20241115.EntityReference);
                  expect(data.transcription2.self).to.be.a('string');
              expect(data.transcription2.self).to.be("");
            expect(data.links).to.be.a(SpeechServicesApiVersion20241115.EvaluationLinks);
                  expect(data.links.files).to.be.a('string');
              expect(data.links.files).to.be("");
            expect(data.locale).to.be.a('string');
            expect(data.locale).to.be("");
            expect(data.properties).to.be.a(SpeechServicesApiVersion20241115.EvaluationProperties);
                  expect(data.properties.wordErrorRate1).to.be.a('number');
              expect(data.properties.wordErrorRate1).to.be(0.0);
              expect(data.properties.sentenceErrorRate1).to.be.a('number');
              expect(data.properties.sentenceErrorRate1).to.be(0.0);
              expect(data.properties.tokenErrorRate1).to.be.a('number');
              expect(data.properties.tokenErrorRate1).to.be(0.0);
              expect(data.properties.sentenceCount1).to.be.a('number');
              expect(data.properties.sentenceCount1).to.be(0);
              expect(data.properties.wordCount1).to.be.a('number');
              expect(data.properties.wordCount1).to.be(0);
              expect(data.properties.correctWordCount1).to.be.a('number');
              expect(data.properties.correctWordCount1).to.be(0);
              expect(data.properties.wordSubstitutionCount1).to.be.a('number');
              expect(data.properties.wordSubstitutionCount1).to.be(0);
              expect(data.properties.wordDeletionCount1).to.be.a('number');
              expect(data.properties.wordDeletionCount1).to.be(0);
              expect(data.properties.wordInsertionCount1).to.be.a('number');
              expect(data.properties.wordInsertionCount1).to.be(0);
              expect(data.properties.tokenCount1).to.be.a('number');
              expect(data.properties.tokenCount1).to.be(0);
              expect(data.properties.correctTokenCount1).to.be.a('number');
              expect(data.properties.correctTokenCount1).to.be(0);
              expect(data.properties.tokenSubstitutionCount1).to.be.a('number');
              expect(data.properties.tokenSubstitutionCount1).to.be(0);
              expect(data.properties.tokenDeletionCount1).to.be.a('number');
              expect(data.properties.tokenDeletionCount1).to.be(0);
              expect(data.properties.tokenInsertionCount1).to.be.a('number');
              expect(data.properties.tokenInsertionCount1).to.be(0);
              expect(data.properties.tokenErrors1).to.be.a(SpeechServicesApiVersion20241115.TokenErrorDetails);
                    expect(data.properties.tokenErrors1.punctuation).to.be.a(SpeechServicesApiVersion20241115.EditsSummary);
                      expect(data.properties.tokenErrors1.punctuation.numberOfEdits).to.be.a('number');
                  expect(data.properties.tokenErrors1.punctuation.numberOfEdits).to.be(0);
                  expect(data.properties.tokenErrors1.punctuation.percentageOfAllEdits).to.be.a('number');
                  expect(data.properties.tokenErrors1.punctuation.percentageOfAllEdits).to.be(0.0);
                expect(data.properties.tokenErrors1.capitalization).to.be.a(SpeechServicesApiVersion20241115.EditsSummary);
                      expect(data.properties.tokenErrors1.capitalization.numberOfEdits).to.be.a('number');
                  expect(data.properties.tokenErrors1.capitalization.numberOfEdits).to.be(0);
                  expect(data.properties.tokenErrors1.capitalization.percentageOfAllEdits).to.be.a('number');
                  expect(data.properties.tokenErrors1.capitalization.percentageOfAllEdits).to.be(0.0);
                expect(data.properties.tokenErrors1.inverseTextNormalization).to.be.a(SpeechServicesApiVersion20241115.EditsSummary);
                      expect(data.properties.tokenErrors1.inverseTextNormalization.numberOfEdits).to.be.a('number');
                  expect(data.properties.tokenErrors1.inverseTextNormalization.numberOfEdits).to.be(0);
                  expect(data.properties.tokenErrors1.inverseTextNormalization.percentageOfAllEdits).to.be.a('number');
                  expect(data.properties.tokenErrors1.inverseTextNormalization.percentageOfAllEdits).to.be(0.0);
                expect(data.properties.tokenErrors1.lexical).to.be.a(SpeechServicesApiVersion20241115.EditsSummary);
                      expect(data.properties.tokenErrors1.lexical.numberOfEdits).to.be.a('number');
                  expect(data.properties.tokenErrors1.lexical.numberOfEdits).to.be(0);
                  expect(data.properties.tokenErrors1.lexical.percentageOfAllEdits).to.be.a('number');
                  expect(data.properties.tokenErrors1.lexical.percentageOfAllEdits).to.be(0.0);
                expect(data.properties.tokenErrors1.others).to.be.a(SpeechServicesApiVersion20241115.EditsSummary);
                      expect(data.properties.tokenErrors1.others.numberOfEdits).to.be.a('number');
                  expect(data.properties.tokenErrors1.others.numberOfEdits).to.be(0);
                  expect(data.properties.tokenErrors1.others.percentageOfAllEdits).to.be.a('number');
                  expect(data.properties.tokenErrors1.others.percentageOfAllEdits).to.be(0.0);
              expect(data.properties.wordErrorRate2).to.be.a('number');
              expect(data.properties.wordErrorRate2).to.be(0.0);
              expect(data.properties.sentenceErrorRate2).to.be.a('number');
              expect(data.properties.sentenceErrorRate2).to.be(0.0);
              expect(data.properties.tokenErrorRate2).to.be.a('number');
              expect(data.properties.tokenErrorRate2).to.be(0.0);
              expect(data.properties.sentenceCount2).to.be.a('number');
              expect(data.properties.sentenceCount2).to.be(0);
              expect(data.properties.wordCount2).to.be.a('number');
              expect(data.properties.wordCount2).to.be(0);
              expect(data.properties.correctWordCount2).to.be.a('number');
              expect(data.properties.correctWordCount2).to.be(0);
              expect(data.properties.wordSubstitutionCount2).to.be.a('number');
              expect(data.properties.wordSubstitutionCount2).to.be(0);
              expect(data.properties.wordDeletionCount2).to.be.a('number');
              expect(data.properties.wordDeletionCount2).to.be(0);
              expect(data.properties.wordInsertionCount2).to.be.a('number');
              expect(data.properties.wordInsertionCount2).to.be(0);
              expect(data.properties.tokenCount2).to.be.a('number');
              expect(data.properties.tokenCount2).to.be(0);
              expect(data.properties.correctTokenCount2).to.be.a('number');
              expect(data.properties.correctTokenCount2).to.be(0);
              expect(data.properties.tokenSubstitutionCount2).to.be.a('number');
              expect(data.properties.tokenSubstitutionCount2).to.be(0);
              expect(data.properties.tokenDeletionCount2).to.be.a('number');
              expect(data.properties.tokenDeletionCount2).to.be(0);
              expect(data.properties.tokenInsertionCount2).to.be.a('number');
              expect(data.properties.tokenInsertionCount2).to.be(0);
              expect(data.properties.tokenErrors2).to.be.a(SpeechServicesApiVersion20241115.TokenErrorDetails);
                    expect(data.properties.tokenErrors2.punctuation).to.be.a(SpeechServicesApiVersion20241115.EditsSummary);
                      expect(data.properties.tokenErrors2.punctuation.numberOfEdits).to.be.a('number');
                  expect(data.properties.tokenErrors2.punctuation.numberOfEdits).to.be(0);
                  expect(data.properties.tokenErrors2.punctuation.percentageOfAllEdits).to.be.a('number');
                  expect(data.properties.tokenErrors2.punctuation.percentageOfAllEdits).to.be(0.0);
                expect(data.properties.tokenErrors2.capitalization).to.be.a(SpeechServicesApiVersion20241115.EditsSummary);
                      expect(data.properties.tokenErrors2.capitalization.numberOfEdits).to.be.a('number');
                  expect(data.properties.tokenErrors2.capitalization.numberOfEdits).to.be(0);
                  expect(data.properties.tokenErrors2.capitalization.percentageOfAllEdits).to.be.a('number');
                  expect(data.properties.tokenErrors2.capitalization.percentageOfAllEdits).to.be(0.0);
                expect(data.properties.tokenErrors2.inverseTextNormalization).to.be.a(SpeechServicesApiVersion20241115.EditsSummary);
                      expect(data.properties.tokenErrors2.inverseTextNormalization.numberOfEdits).to.be.a('number');
                  expect(data.properties.tokenErrors2.inverseTextNormalization.numberOfEdits).to.be(0);
                  expect(data.properties.tokenErrors2.inverseTextNormalization.percentageOfAllEdits).to.be.a('number');
                  expect(data.properties.tokenErrors2.inverseTextNormalization.percentageOfAllEdits).to.be(0.0);
                expect(data.properties.tokenErrors2.lexical).to.be.a(SpeechServicesApiVersion20241115.EditsSummary);
                      expect(data.properties.tokenErrors2.lexical.numberOfEdits).to.be.a('number');
                  expect(data.properties.tokenErrors2.lexical.numberOfEdits).to.be(0);
                  expect(data.properties.tokenErrors2.lexical.percentageOfAllEdits).to.be.a('number');
                  expect(data.properties.tokenErrors2.lexical.percentageOfAllEdits).to.be(0.0);
                expect(data.properties.tokenErrors2.others).to.be.a(SpeechServicesApiVersion20241115.EditsSummary);
                      expect(data.properties.tokenErrors2.others.numberOfEdits).to.be.a('number');
                  expect(data.properties.tokenErrors2.others.numberOfEdits).to.be(0);
                  expect(data.properties.tokenErrors2.others.percentageOfAllEdits).to.be.a('number');
                  expect(data.properties.tokenErrors2.others.percentageOfAllEdits).to.be(0.0);
              expect(data.properties.error).to.be.a(SpeechServicesApiVersion20241115.EntityError);
                    expect(data.properties.error.code).to.be.a('string');
                expect(data.properties.error.code).to.be("");
                expect(data.properties.error.message).to.be.a('string');
                expect(data.properties.error.message).to.be("");
            expect(data.status).to.be.a(SpeechServicesApiVersion20241115.Status);
    
            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
