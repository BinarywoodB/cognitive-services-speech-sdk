/*
 * Speech Services API version 2024-11-15
 * Speech Services API version 2024-11-15.
 *
 * OpenAPI spec version: 2024-11-15
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.43
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.SpeechServicesApiVersion20241115);
  }
}(this, function(expect, SpeechServicesApiVersion20241115) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new SpeechServicesApiVersion20241115.CustomSpeechWebHooksApi();
  });

  describe('(package)', function() {
    describe('CustomSpeechWebHooksApi', function() {
      describe('webHooksCreate', function() {
        it('should call webHooksCreate successfully', function(done) {
          // TODO: uncomment, update parameter values for webHooksCreate call and complete the assertions
          /*
          var apiVersion = "apiVersion_example";
          var webHook = new SpeechServicesApiVersion20241115.WebHook();
          webHook.displayName = "";
          webHook.description = "";
          webHook.customProperties = {key: ""};
          webHook.properties = new SpeechServicesApiVersion20241115.WebHookProperties();
          webHook.properties.secret = "";
          webHook.properties.error = new SpeechServicesApiVersion20241115.EntityError();
          webHook.webUrl = "";
          webHook.events = new SpeechServicesApiVersion20241115.WebHookEvents();
          webHook.events.datasetCreation = false;
          webHook.events.datasetProcessing = false;
          webHook.events.datasetCompletion = false;
          webHook.events.datasetDeletion = false;
          webHook.events.modelCreation = false;
          webHook.events.modelProcessing = false;
          webHook.events.modelCompletion = false;
          webHook.events.modelDeletion = false;
          webHook.events.evaluationCreation = false;
          webHook.events.evaluationProcessing = false;
          webHook.events.evaluationCompletion = false;
          webHook.events.evaluationDeletion = false;
          webHook.events.transcriptionCreation = false;
          webHook.events.transcriptionProcessing = false;
          webHook.events.transcriptionCompletion = false;
          webHook.events.transcriptionDeletion = false;
          webHook.events.endpointCreation = false;
          webHook.events.endpointProcessing = false;
          webHook.events.endpointCompletion = false;
          webHook.events.endpointDeletion = false;
          webHook.events.ping = false;
          webHook.events.challenge = false;
          webHook.status = new SpeechServicesApiVersion20241115.Status();
          webHook.links = new SpeechServicesApiVersion20241115.WebHookLinks();

          instance.webHooksCreate(apiVersion, webHook, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(SpeechServicesApiVersion20241115.WebHook);
            expect(data.self).to.be.a('string');
            expect(data.self).to.be("");
            expect(data.displayName).to.be.a('string');
            expect(data.displayName).to.be("");
            expect(data.description).to.be.a('string');
            expect(data.description).to.be("");
            {
              let dataCtr = data.customProperties;
              expect(dataCtr).to.be.an(Object);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }
            expect(data.properties).to.be.a(SpeechServicesApiVersion20241115.WebHookProperties);
                  expect(data.properties.apiVersion).to.be.a('string');
              expect(data.properties.apiVersion).to.be("");
              expect(data.properties.secret).to.be.a('string');
              expect(data.properties.secret).to.be("");
              expect(data.properties.error).to.be.a(SpeechServicesApiVersion20241115.EntityError);
                    expect(data.properties.error.code).to.be.a('string');
                expect(data.properties.error.code).to.be("");
                expect(data.properties.error.message).to.be.a('string');
                expect(data.properties.error.message).to.be("");
            expect(data.webUrl).to.be.a('string');
            expect(data.webUrl).to.be("");
            expect(data.events).to.be.a(SpeechServicesApiVersion20241115.WebHookEvents);
                  expect(data.events.datasetCreation).to.be.a('boolean');
              expect(data.events.datasetCreation).to.be(false);
              expect(data.events.datasetProcessing).to.be.a('boolean');
              expect(data.events.datasetProcessing).to.be(false);
              expect(data.events.datasetCompletion).to.be.a('boolean');
              expect(data.events.datasetCompletion).to.be(false);
              expect(data.events.datasetDeletion).to.be.a('boolean');
              expect(data.events.datasetDeletion).to.be(false);
              expect(data.events.modelCreation).to.be.a('boolean');
              expect(data.events.modelCreation).to.be(false);
              expect(data.events.modelProcessing).to.be.a('boolean');
              expect(data.events.modelProcessing).to.be(false);
              expect(data.events.modelCompletion).to.be.a('boolean');
              expect(data.events.modelCompletion).to.be(false);
              expect(data.events.modelDeletion).to.be.a('boolean');
              expect(data.events.modelDeletion).to.be(false);
              expect(data.events.evaluationCreation).to.be.a('boolean');
              expect(data.events.evaluationCreation).to.be(false);
              expect(data.events.evaluationProcessing).to.be.a('boolean');
              expect(data.events.evaluationProcessing).to.be(false);
              expect(data.events.evaluationCompletion).to.be.a('boolean');
              expect(data.events.evaluationCompletion).to.be(false);
              expect(data.events.evaluationDeletion).to.be.a('boolean');
              expect(data.events.evaluationDeletion).to.be(false);
              expect(data.events.transcriptionCreation).to.be.a('boolean');
              expect(data.events.transcriptionCreation).to.be(false);
              expect(data.events.transcriptionProcessing).to.be.a('boolean');
              expect(data.events.transcriptionProcessing).to.be(false);
              expect(data.events.transcriptionCompletion).to.be.a('boolean');
              expect(data.events.transcriptionCompletion).to.be(false);
              expect(data.events.transcriptionDeletion).to.be.a('boolean');
              expect(data.events.transcriptionDeletion).to.be(false);
              expect(data.events.endpointCreation).to.be.a('boolean');
              expect(data.events.endpointCreation).to.be(false);
              expect(data.events.endpointProcessing).to.be.a('boolean');
              expect(data.events.endpointProcessing).to.be(false);
              expect(data.events.endpointCompletion).to.be.a('boolean');
              expect(data.events.endpointCompletion).to.be(false);
              expect(data.events.endpointDeletion).to.be.a('boolean');
              expect(data.events.endpointDeletion).to.be(false);
              expect(data.events.ping).to.be.a('boolean');
              expect(data.events.ping).to.be(false);
              expect(data.events.challenge).to.be.a('boolean');
              expect(data.events.challenge).to.be(false);
            expect(data.createdDateTime).to.be.a(Date);
            expect(data.createdDateTime).to.be(new Date());
            expect(data.lastActionDateTime).to.be.a(Date);
            expect(data.lastActionDateTime).to.be(new Date());
            expect(data.status).to.be.a(SpeechServicesApiVersion20241115.Status);
                expect(data.links).to.be.a(SpeechServicesApiVersion20241115.WebHookLinks);
                  expect(data.links.test).to.be.a('string');
              expect(data.links.test).to.be("");
              expect(data.links.ping).to.be.a('string');
              expect(data.links.ping).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webHooksDelete', function() {
        it('should call webHooksDelete successfully', function(done) {
          // TODO: uncomment, update parameter values for webHooksDelete call
          /*
          var id = "id_example";
          var apiVersion = "apiVersion_example";

          instance.webHooksDelete(id, apiVersion, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webHooksGet', function() {
        it('should call webHooksGet successfully', function(done) {
          // TODO: uncomment, update parameter values for webHooksGet call and complete the assertions
          /*
          var id = "id_example";
          var apiVersion = "apiVersion_example";

          instance.webHooksGet(id, apiVersion, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(SpeechServicesApiVersion20241115.WebHook);
            expect(data.self).to.be.a('string');
            expect(data.self).to.be("");
            expect(data.displayName).to.be.a('string');
            expect(data.displayName).to.be("");
            expect(data.description).to.be.a('string');
            expect(data.description).to.be("");
            {
              let dataCtr = data.customProperties;
              expect(dataCtr).to.be.an(Object);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }
            expect(data.properties).to.be.a(SpeechServicesApiVersion20241115.WebHookProperties);
                  expect(data.properties.apiVersion).to.be.a('string');
              expect(data.properties.apiVersion).to.be("");
              expect(data.properties.secret).to.be.a('string');
              expect(data.properties.secret).to.be("");
              expect(data.properties.error).to.be.a(SpeechServicesApiVersion20241115.EntityError);
                    expect(data.properties.error.code).to.be.a('string');
                expect(data.properties.error.code).to.be("");
                expect(data.properties.error.message).to.be.a('string');
                expect(data.properties.error.message).to.be("");
            expect(data.webUrl).to.be.a('string');
            expect(data.webUrl).to.be("");
            expect(data.events).to.be.a(SpeechServicesApiVersion20241115.WebHookEvents);
                  expect(data.events.datasetCreation).to.be.a('boolean');
              expect(data.events.datasetCreation).to.be(false);
              expect(data.events.datasetProcessing).to.be.a('boolean');
              expect(data.events.datasetProcessing).to.be(false);
              expect(data.events.datasetCompletion).to.be.a('boolean');
              expect(data.events.datasetCompletion).to.be(false);
              expect(data.events.datasetDeletion).to.be.a('boolean');
              expect(data.events.datasetDeletion).to.be(false);
              expect(data.events.modelCreation).to.be.a('boolean');
              expect(data.events.modelCreation).to.be(false);
              expect(data.events.modelProcessing).to.be.a('boolean');
              expect(data.events.modelProcessing).to.be(false);
              expect(data.events.modelCompletion).to.be.a('boolean');
              expect(data.events.modelCompletion).to.be(false);
              expect(data.events.modelDeletion).to.be.a('boolean');
              expect(data.events.modelDeletion).to.be(false);
              expect(data.events.evaluationCreation).to.be.a('boolean');
              expect(data.events.evaluationCreation).to.be(false);
              expect(data.events.evaluationProcessing).to.be.a('boolean');
              expect(data.events.evaluationProcessing).to.be(false);
              expect(data.events.evaluationCompletion).to.be.a('boolean');
              expect(data.events.evaluationCompletion).to.be(false);
              expect(data.events.evaluationDeletion).to.be.a('boolean');
              expect(data.events.evaluationDeletion).to.be(false);
              expect(data.events.transcriptionCreation).to.be.a('boolean');
              expect(data.events.transcriptionCreation).to.be(false);
              expect(data.events.transcriptionProcessing).to.be.a('boolean');
              expect(data.events.transcriptionProcessing).to.be(false);
              expect(data.events.transcriptionCompletion).to.be.a('boolean');
              expect(data.events.transcriptionCompletion).to.be(false);
              expect(data.events.transcriptionDeletion).to.be.a('boolean');
              expect(data.events.transcriptionDeletion).to.be(false);
              expect(data.events.endpointCreation).to.be.a('boolean');
              expect(data.events.endpointCreation).to.be(false);
              expect(data.events.endpointProcessing).to.be.a('boolean');
              expect(data.events.endpointProcessing).to.be(false);
              expect(data.events.endpointCompletion).to.be.a('boolean');
              expect(data.events.endpointCompletion).to.be(false);
              expect(data.events.endpointDeletion).to.be.a('boolean');
              expect(data.events.endpointDeletion).to.be(false);
              expect(data.events.ping).to.be.a('boolean');
              expect(data.events.ping).to.be(false);
              expect(data.events.challenge).to.be.a('boolean');
              expect(data.events.challenge).to.be(false);
            expect(data.createdDateTime).to.be.a(Date);
            expect(data.createdDateTime).to.be(new Date());
            expect(data.lastActionDateTime).to.be.a(Date);
            expect(data.lastActionDateTime).to.be(new Date());
            expect(data.status).to.be.a(SpeechServicesApiVersion20241115.Status);
                expect(data.links).to.be.a(SpeechServicesApiVersion20241115.WebHookLinks);
                  expect(data.links.test).to.be.a('string');
              expect(data.links.test).to.be("");
              expect(data.links.ping).to.be.a('string');
              expect(data.links.ping).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webHooksList', function() {
        it('should call webHooksList successfully', function(done) {
          // TODO: uncomment, update parameter values for webHooksList call and complete the assertions
          /*
          var apiVersion = "apiVersion_example";
          var opts = {};
          opts.skip = 56;
          opts.top = 56;
          opts.filter = "filter_example";

          instance.webHooksList(apiVersion, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(SpeechServicesApiVersion20241115.PaginatedWebHooks);
            {
              let dataCtr = data.values;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(SpeechServicesApiVersion20241115.WebHook);
                expect(data.self).to.be.a('string');
                expect(data.self).to.be("");
                expect(data.displayName).to.be.a('string');
                expect(data.displayName).to.be("");
                expect(data.description).to.be.a('string');
                expect(data.description).to.be("");
                {
                  let dataCtr = data.customProperties;
                  expect(dataCtr).to.be.an(Object);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("");
                  }
                }
                expect(data.properties).to.be.a(SpeechServicesApiVersion20241115.WebHookProperties);
                      expect(data.properties.apiVersion).to.be.a('string');
                  expect(data.properties.apiVersion).to.be("");
                  expect(data.properties.secret).to.be.a('string');
                  expect(data.properties.secret).to.be("");
                  expect(data.properties.error).to.be.a(SpeechServicesApiVersion20241115.EntityError);
                        expect(data.properties.error.code).to.be.a('string');
                    expect(data.properties.error.code).to.be("");
                    expect(data.properties.error.message).to.be.a('string');
                    expect(data.properties.error.message).to.be("");
                expect(data.webUrl).to.be.a('string');
                expect(data.webUrl).to.be("");
                expect(data.events).to.be.a(SpeechServicesApiVersion20241115.WebHookEvents);
                      expect(data.events.datasetCreation).to.be.a('boolean');
                  expect(data.events.datasetCreation).to.be(false);
                  expect(data.events.datasetProcessing).to.be.a('boolean');
                  expect(data.events.datasetProcessing).to.be(false);
                  expect(data.events.datasetCompletion).to.be.a('boolean');
                  expect(data.events.datasetCompletion).to.be(false);
                  expect(data.events.datasetDeletion).to.be.a('boolean');
                  expect(data.events.datasetDeletion).to.be(false);
                  expect(data.events.modelCreation).to.be.a('boolean');
                  expect(data.events.modelCreation).to.be(false);
                  expect(data.events.modelProcessing).to.be.a('boolean');
                  expect(data.events.modelProcessing).to.be(false);
                  expect(data.events.modelCompletion).to.be.a('boolean');
                  expect(data.events.modelCompletion).to.be(false);
                  expect(data.events.modelDeletion).to.be.a('boolean');
                  expect(data.events.modelDeletion).to.be(false);
                  expect(data.events.evaluationCreation).to.be.a('boolean');
                  expect(data.events.evaluationCreation).to.be(false);
                  expect(data.events.evaluationProcessing).to.be.a('boolean');
                  expect(data.events.evaluationProcessing).to.be(false);
                  expect(data.events.evaluationCompletion).to.be.a('boolean');
                  expect(data.events.evaluationCompletion).to.be(false);
                  expect(data.events.evaluationDeletion).to.be.a('boolean');
                  expect(data.events.evaluationDeletion).to.be(false);
                  expect(data.events.transcriptionCreation).to.be.a('boolean');
                  expect(data.events.transcriptionCreation).to.be(false);
                  expect(data.events.transcriptionProcessing).to.be.a('boolean');
                  expect(data.events.transcriptionProcessing).to.be(false);
                  expect(data.events.transcriptionCompletion).to.be.a('boolean');
                  expect(data.events.transcriptionCompletion).to.be(false);
                  expect(data.events.transcriptionDeletion).to.be.a('boolean');
                  expect(data.events.transcriptionDeletion).to.be(false);
                  expect(data.events.endpointCreation).to.be.a('boolean');
                  expect(data.events.endpointCreation).to.be(false);
                  expect(data.events.endpointProcessing).to.be.a('boolean');
                  expect(data.events.endpointProcessing).to.be(false);
                  expect(data.events.endpointCompletion).to.be.a('boolean');
                  expect(data.events.endpointCompletion).to.be(false);
                  expect(data.events.endpointDeletion).to.be.a('boolean');
                  expect(data.events.endpointDeletion).to.be(false);
                  expect(data.events.ping).to.be.a('boolean');
                  expect(data.events.ping).to.be(false);
                  expect(data.events.challenge).to.be.a('boolean');
                  expect(data.events.challenge).to.be(false);
                expect(data.createdDateTime).to.be.a(Date);
                expect(data.createdDateTime).to.be(new Date());
                expect(data.lastActionDateTime).to.be.a(Date);
                expect(data.lastActionDateTime).to.be(new Date());
                expect(data.status).to.be.a(SpeechServicesApiVersion20241115.Status);
                    expect(data.links).to.be.a(SpeechServicesApiVersion20241115.WebHookLinks);
                      expect(data.links.test).to.be.a('string');
                  expect(data.links.test).to.be("");
                  expect(data.links.ping).to.be.a('string');
                  expect(data.links.ping).to.be("");

                      }
            }
            expect(data.nextLink).to.be.a('string');
            expect(data.nextLink).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webHooksPing', function() {
        it('should call webHooksPing successfully', function(done) {
          // TODO: uncomment, update parameter values for webHooksPing call
          /*
          var id = "id_example";
          var apiVersion = "apiVersion_example";

          instance.webHooksPing(id, apiVersion, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webHooksTest', function() {
        it('should call webHooksTest successfully', function(done) {
          // TODO: uncomment, update parameter values for webHooksTest call
          /*
          var id = "id_example";
          var apiVersion = "apiVersion_example";

          instance.webHooksTest(id, apiVersion, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webHooksUpdate', function() {
        it('should call webHooksUpdate successfully', function(done) {
          // TODO: uncomment, update parameter values for webHooksUpdate call and complete the assertions
          /*
          var id = "id_example";
          var apiVersion = "apiVersion_example";
          var webHookUpdate = new SpeechServicesApiVersion20241115.WebHookUpdate();
          webHookUpdate.displayName = "";
          webHookUpdate.description = "";
          webHookUpdate.webUrl = "";
          webHookUpdate.customProperties = {key: ""};
          webHookUpdate.properties = new SpeechServicesApiVersion20241115.WebHookPropertiesUpdate();
          webHookUpdate.properties.secret = "";
          webHookUpdate.events = new SpeechServicesApiVersion20241115.WebHookEvents();
          webHookUpdate.events.datasetCreation = false;
          webHookUpdate.events.datasetProcessing = false;
          webHookUpdate.events.datasetCompletion = false;
          webHookUpdate.events.datasetDeletion = false;
          webHookUpdate.events.modelCreation = false;
          webHookUpdate.events.modelProcessing = false;
          webHookUpdate.events.modelCompletion = false;
          webHookUpdate.events.modelDeletion = false;
          webHookUpdate.events.evaluationCreation = false;
          webHookUpdate.events.evaluationProcessing = false;
          webHookUpdate.events.evaluationCompletion = false;
          webHookUpdate.events.evaluationDeletion = false;
          webHookUpdate.events.transcriptionCreation = false;
          webHookUpdate.events.transcriptionProcessing = false;
          webHookUpdate.events.transcriptionCompletion = false;
          webHookUpdate.events.transcriptionDeletion = false;
          webHookUpdate.events.endpointCreation = false;
          webHookUpdate.events.endpointProcessing = false;
          webHookUpdate.events.endpointCompletion = false;
          webHookUpdate.events.endpointDeletion = false;
          webHookUpdate.events.ping = false;
          webHookUpdate.events.challenge = false;

          instance.webHooksUpdate(id, apiVersion, webHookUpdate, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(SpeechServicesApiVersion20241115.WebHook);
            expect(data.self).to.be.a('string');
            expect(data.self).to.be("");
            expect(data.displayName).to.be.a('string');
            expect(data.displayName).to.be("");
            expect(data.description).to.be.a('string');
            expect(data.description).to.be("");
            {
              let dataCtr = data.customProperties;
              expect(dataCtr).to.be.an(Object);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }
            expect(data.properties).to.be.a(SpeechServicesApiVersion20241115.WebHookProperties);
                  expect(data.properties.apiVersion).to.be.a('string');
              expect(data.properties.apiVersion).to.be("");
              expect(data.properties.secret).to.be.a('string');
              expect(data.properties.secret).to.be("");
              expect(data.properties.error).to.be.a(SpeechServicesApiVersion20241115.EntityError);
                    expect(data.properties.error.code).to.be.a('string');
                expect(data.properties.error.code).to.be("");
                expect(data.properties.error.message).to.be.a('string');
                expect(data.properties.error.message).to.be("");
            expect(data.webUrl).to.be.a('string');
            expect(data.webUrl).to.be("");
            expect(data.events).to.be.a(SpeechServicesApiVersion20241115.WebHookEvents);
                  expect(data.events.datasetCreation).to.be.a('boolean');
              expect(data.events.datasetCreation).to.be(false);
              expect(data.events.datasetProcessing).to.be.a('boolean');
              expect(data.events.datasetProcessing).to.be(false);
              expect(data.events.datasetCompletion).to.be.a('boolean');
              expect(data.events.datasetCompletion).to.be(false);
              expect(data.events.datasetDeletion).to.be.a('boolean');
              expect(data.events.datasetDeletion).to.be(false);
              expect(data.events.modelCreation).to.be.a('boolean');
              expect(data.events.modelCreation).to.be(false);
              expect(data.events.modelProcessing).to.be.a('boolean');
              expect(data.events.modelProcessing).to.be(false);
              expect(data.events.modelCompletion).to.be.a('boolean');
              expect(data.events.modelCompletion).to.be(false);
              expect(data.events.modelDeletion).to.be.a('boolean');
              expect(data.events.modelDeletion).to.be(false);
              expect(data.events.evaluationCreation).to.be.a('boolean');
              expect(data.events.evaluationCreation).to.be(false);
              expect(data.events.evaluationProcessing).to.be.a('boolean');
              expect(data.events.evaluationProcessing).to.be(false);
              expect(data.events.evaluationCompletion).to.be.a('boolean');
              expect(data.events.evaluationCompletion).to.be(false);
              expect(data.events.evaluationDeletion).to.be.a('boolean');
              expect(data.events.evaluationDeletion).to.be(false);
              expect(data.events.transcriptionCreation).to.be.a('boolean');
              expect(data.events.transcriptionCreation).to.be(false);
              expect(data.events.transcriptionProcessing).to.be.a('boolean');
              expect(data.events.transcriptionProcessing).to.be(false);
              expect(data.events.transcriptionCompletion).to.be.a('boolean');
              expect(data.events.transcriptionCompletion).to.be(false);
              expect(data.events.transcriptionDeletion).to.be.a('boolean');
              expect(data.events.transcriptionDeletion).to.be(false);
              expect(data.events.endpointCreation).to.be.a('boolean');
              expect(data.events.endpointCreation).to.be(false);
              expect(data.events.endpointProcessing).to.be.a('boolean');
              expect(data.events.endpointProcessing).to.be(false);
              expect(data.events.endpointCompletion).to.be.a('boolean');
              expect(data.events.endpointCompletion).to.be(false);
              expect(data.events.endpointDeletion).to.be.a('boolean');
              expect(data.events.endpointDeletion).to.be(false);
              expect(data.events.ping).to.be.a('boolean');
              expect(data.events.ping).to.be(false);
              expect(data.events.challenge).to.be.a('boolean');
              expect(data.events.challenge).to.be(false);
            expect(data.createdDateTime).to.be.a(Date);
            expect(data.createdDateTime).to.be(new Date());
            expect(data.lastActionDateTime).to.be.a(Date);
            expect(data.lastActionDateTime).to.be(new Date());
            expect(data.status).to.be.a(SpeechServicesApiVersion20241115.Status);
                expect(data.links).to.be.a(SpeechServicesApiVersion20241115.WebHookLinks);
                  expect(data.links.test).to.be.a('string');
              expect(data.links.test).to.be("");
              expect(data.links.ping).to.be.a('string');
              expect(data.links.ping).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
